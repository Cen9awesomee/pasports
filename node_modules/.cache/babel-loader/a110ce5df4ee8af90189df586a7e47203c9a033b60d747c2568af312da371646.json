{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport MapSvg from '@/assets/map.svg';\nexport default {\n  components: {\n    MapSvg\n  },\n  props: {\n    regionItems: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      selectedRegion: null,\n      tooltipVisible: false,\n      tooltipText: '',\n      tooltipX: 0,\n      tooltipY: 0,\n      defaultViewBox: '0 0 29252.3 16557.2',\n      currentViewBox: '0 0 29252.3 16557.2',\n      zoomLevel: 1\n    };\n  },\n  mounted() {\n    this.updateSvgText();\n    this.updateSvgClasses();\n  },\n  methods: {\n    handleSvgClick(event) {\n      const path = event.target.closest('path');\n      if (path) {\n        const regionId = this.getRegionIdFromClass(path);\n        if (regionId) {\n          this.selectRegion(regionId);\n        }\n      }\n    },\n    handleSvgMouseEnter(event) {\n      const path = event.target.closest('path');\n      if (path) {\n        const regionId = this.getRegionIdFromClass(path);\n        const region = this.regionItems.find(r => r.id === regionId);\n        const regionName = region ? region.name : 'Неизвестный регион';\n        this.showTooltip(regionName, event);\n      }\n    },\n    getRegionIdFromClass(element) {\n      const classList = element.classList;\n      const filClass = Array.from(classList).find(cls => cls.startsWith('fil'));\n      return filClass ? filClass.replace('fil', '') : null;\n    },\n    selectRegion(regionId) {\n      this.selectedRegion = regionId;\n      this.centerRegion(regionId);\n      this.updateSvgClasses();\n      this.$emit('region-selected', regionId);\n    },\n    resetToDefault() {\n      this.selectedRegion = null;\n      this.currentViewBox = this.defaultViewBox;\n      this.zoomLevel = 1;\n      this.updateSvgClasses();\n      this.updateSvgViewBox();\n      this.$emit('region-selected', null);\n    },\n    centerRegion(regionId) {\n      const svg = this.$el.querySelector('.svg-map');\n      const path = svg.querySelector(`.fil${regionId}`);\n      if (path) {\n        const bbox = path.getBBox();\n        const container = this.$el.querySelector('.map-container');\n        let zoomFactor = 1.5;\n        if (container) {\n          const containerWidth = container.clientWidth;\n          const containerHeight = container.clientHeight;\n          zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8;\n        }\n        const newWidth = bbox.width * zoomFactor;\n        const newHeight = bbox.height;\n        const centerX = bbox.x + bbox.width / 2;\n        const centerY = bbox.y + bbox.height / 2;\n        const newX = centerX - newWidth / 2;\n        const newY = centerY - newHeight / 2;\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\n        this.zoomLevel = zoomFactor;\n      }\n    },\n    updateSvgViewBox() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (svg) {\n        svg.setAttribute('viewBox', this.currentViewBox);\n      }\n    },\n    updateSvgClasses() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) return;\n      const paths = svg.querySelectorAll('path');\n      paths.forEach(path => {\n        const regionId = this.getRegionIdFromClass(path);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          path.classList.add('hidden');\n        } else {\n          path.classList.remove('hidden');\n        }\n      });\n      const texts = svg.querySelectorAll('text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          text.classList.add('hidden');\n        } else {\n          text.classList.remove('hidden');\n        }\n      });\n    },\n    updateSvgText() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) return;\n      const texts = svg.querySelectorAll('text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        const region = this.regionItems.find(r => r.id === regionId);\n        if (region && region.percentage) {\n          text.textContent = `${region.percentage}%`;\n        }\n      });\n    },\n    showTooltip(text, event) {\n      this.tooltipText = text;\n      this.tooltipVisible = true;\n      this.tooltipX = event.clientX;\n      this.tooltipY = event.clientY;\n    },\n    hideTooltip() {\n      this.tooltipVisible = false;\n    }\n  },\n  watch: {\n    selectedRegion() {\n      this.updateSvgClasses();\n    },\n    regionItems: {\n      handler() {\n        this.updateSvgText();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["MapSvg","components","props","regionItems","type","Array","required","default","data","selectedRegion","tooltipVisible","tooltipText","tooltipX","tooltipY","defaultViewBox","currentViewBox","zoomLevel","mounted","updateSvgText","updateSvgClasses","methods","handleSvgClick","event","path","target","closest","regionId","getRegionIdFromClass","selectRegion","handleSvgMouseEnter","region","find","r","id","regionName","name","showTooltip","element","classList","filClass","from","cls","startsWith","replace","centerRegion","$emit","resetToDefault","updateSvgViewBox","svg","$el","querySelector","bbox","getBBox","container","zoomFactor","containerWidth","clientWidth","containerHeight","clientHeight","Math","min","width","height","newWidth","newHeight","centerX","x","centerY","y","newX","newY","setAttribute","paths","querySelectorAll","forEach","add","remove","texts","text","percentage","textContent","clientX","clientY","hideTooltip","watch","handler","deep"],"sources":["src/components/MapComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <MapSvg\r\n      :viewBox=\"currentViewBox\"\r\n      class=\"svg-map\"\r\n      @click=\"handleSvgClick\"\r\n      @mouseenter=\"handleSvgMouseEnter\"\r\n      @mouseleave=\"hideTooltip\"\r\n    />\r\n    <div v-if=\"tooltipVisible\" class=\"tooltip\" :style=\"{ left: tooltipX + 'px', top: tooltipY + 'px' }\">\r\n      {{ tooltipText }}\r\n    </div>\r\n    <button v-if=\"selectedRegion !== null\" class=\"reset-btn\" @click=\"resetToDefault\">\r\n      <i class=\"fa-solid fa-earth-americas\"></i>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MapSvg from '@/assets/map.svg';\r\nexport default {\r\n  components: {\r\n    MapSvg,\r\n  },\r\n  props: {\r\n    regionItems: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => [],\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      selectedRegion: null,\r\n      tooltipVisible: false,\r\n      tooltipText: '',\r\n      tooltipX: 0,\r\n      tooltipY: 0,\r\n      defaultViewBox: '0 0 29252.3 16557.2',\r\n      currentViewBox: '0 0 29252.3 16557.2',\r\n      zoomLevel: 1,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.updateSvgText();\r\n    this.updateSvgClasses();\r\n  },\r\n  methods: {\r\nhandleSvgClick(event) {\r\n      const path = event.target.closest('path');\r\n      if (path) {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (regionId) {\r\n          this.selectRegion(regionId);\r\n        }\r\n      }\r\n    },\r\nhandleSvgMouseEnter(event) {\r\n      const path = event.target.closest('path');\r\n      if (path) {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        const region = this.regionItems.find((r) => r.id === regionId);\r\n        const regionName = region ? region.name : 'Неизвестный регион';\r\n        this.showTooltip(regionName, event);\r\n      }\r\n    },\r\ngetRegionIdFromClass(element) {\r\n      const classList = element.classList;\r\n      const filClass = Array.from(classList).find((cls) => cls.startsWith('fil'));\r\n      return filClass ? filClass.replace('fil', '') : null;\r\n    },\r\nselectRegion(regionId) {\r\n      this.selectedRegion = regionId;\r\n      this.centerRegion(regionId);\r\n      this.updateSvgClasses();\r\n      this.$emit('region-selected', regionId);\r\n    },\r\nresetToDefault() {\r\n      this.selectedRegion = null;\r\n      this.currentViewBox = this.defaultViewBox;\r\n      this.zoomLevel = 1;\r\n      this.updateSvgClasses();\r\n      this.updateSvgViewBox();\r\n      this.$emit('region-selected', null);\r\n    },\r\ncenterRegion(regionId) {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      const path = svg.querySelector(`.fil${regionId}`);\r\n      if (path) {\r\n        const bbox = path.getBBox();\r\n        const container = this.$el.querySelector('.map-container');\r\n        let zoomFactor = 1.5;\r\n        if (container) {\r\n          const containerWidth = container.clientWidth;\r\n          const containerHeight = container.clientHeight;\r\n          zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8;\r\n        }\r\n        const newWidth = bbox.width * zoomFactor;\r\n        const newHeight = bbox.height;\r\n        const centerX = bbox.x + bbox.width / 2;\r\n        const centerY = bbox.y + bbox.height / 2;\r\n        const newX = centerX - newWidth / 2;\r\n        const newY = centerY - newHeight / 2;\r\n\r\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\r\n        this.zoomLevel = zoomFactor;\r\n      }\r\n    },\r\nupdateSvgViewBox() {\r\n  const svg = this.$el.querySelector('.svg-map');\r\n  if (svg) {\r\n    svg.setAttribute('viewBox', this.currentViewBox);\r\n  }\r\n},\r\nupdateSvgClasses() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (!svg) return;\r\n      const paths = svg.querySelectorAll('path');\r\n      paths.forEach((path) => {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          path.classList.add('hidden');\r\n        } else {\r\n          path.classList.remove('hidden');\r\n        }\r\n      });\r\n      const texts = svg.querySelectorAll('text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          text.classList.add('hidden');\r\n        } else {\r\n          text.classList.remove('hidden');\r\n        }\r\n      });\r\n    },\r\nupdateSvgText() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (!svg) return;\r\n      const texts = svg.querySelectorAll('text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        const region = this.regionItems.find((r) => r.id === regionId);\r\n        if (region && region.percentage) {\r\n          text.textContent = `${region.percentage}%`;\r\n        }\r\n      });\r\n    },\r\nshowTooltip(text, event) {\r\n      this.tooltipText = text;\r\n      this.tooltipVisible = true;\r\n      this.tooltipX = event.clientX;\r\n      this.tooltipY = event.clientY;\r\n    },\r\nhideTooltip() {\r\n      this.tooltipVisible = false;\r\n    },\r\n  },\r\n  watch: {\r\nselectedRegion() {\r\n      this.updateSvgClasses();\r\n    },\r\n    regionItems: {\r\nhandler() {\r\n        this.updateSvgText();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}