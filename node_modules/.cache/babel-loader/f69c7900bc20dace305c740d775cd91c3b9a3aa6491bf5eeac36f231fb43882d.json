{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport ApexChart from 'vue-apexcharts';\nexport default {\n  name: 'ValChart',\n  components: {\n    ApexChart\n  },\n  props: {\n    height: {\n      type: [Number, String],\n      default: 250\n    },\n    width: {\n      type: [Number, String],\n      default: '95%'\n    },\n    dataSource: {\n      type: Object,\n      required: true,\n      default: () => ({\n        series: [],\n        categories: [],\n        colors: [],\n        percentChanges: []\n      })\n    }\n  },\n  computed: {\n    chartOptions() {\n      const percentChanges = this.dataSource.percentChanges || [];\n      return {\n        chart: {\n          type: 'bar',\n          stacked: true,\n          height: this.height,\n          animations: {\n            enabled: true,\n            speed: 800\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            barHeight: '70%',\n            dataLabels: {\n              position: 'center'\n            }\n          }\n        },\n        dataLabels: {\n          enabled: true,\n          offsetX: -6,\n          style: {\n            fontSize: '11px',\n            fontWeight: 400,\n            fontFamily: 'Montserrat-Regular',\n            colors: ['#ffffff']\n          },\n          formatter: val => val.toFixed(1)\n        },\n        annotations: {\n          texts: this.dataSource.categories.map((category, index) => {\n            let total = 0;\n            this.dataSource.series.forEach(serie => {\n              if (serie.data && typeof serie.data[index] === 'number') {\n                total += serie.data[index];\n              }\n            });\n            const percentChange = percentChanges && percentChanges.length ? percentChanges.find(item => item.year === category) : null;\n            const change = percentChange?.change || '0%';\n            const color = change.startsWith('-') ? '#FF4D4F' : '#52C41A';\n            console.log(`Category: ${category}, Change: ${change}, Total: ${total}, X: ${total + 30}`);\n            return {\n              x: total,\n              xAxisIndex: 0,\n              yAxisIndex: index,\n              text: `${change}\\n${total.toFixed(2)}`,\n              textAnchor: 'start',\n              foreColor: color,\n              fontSize: '11px',\n              fontFamily: 'Montserrat-Regular',\n              fontWeight: 400,\n              background: {\n                fill: '#ffffff',\n                stroke: 'none'\n              },\n              offsetX: 30,\n              offsetY: 0\n            };\n          })\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            const category = w.config.xaxis.categories[dataPointIndex];\n            const value = series[seriesIndex][dataPointIndex];\n            const color = w.globals.colors[seriesIndex];\n            return `\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\n                <strong>${category}:</strong> ${value}\n              </div>\n            `;\n          }\n        },\n        xaxis: {\n          categories: this.dataSource.categories,\n          labels: {\n            style: {\n              colors: '#ffffff',\n              fontSize: '11px'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        yaxis: {\n          labels: {\n            offsetX: 5,\n            style: {\n              colors: '#ffffff'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        legend: {\n          position: 'bottom',\n          offsetY: -10,\n          fontSize: '9px',\n          fontFamily: 'Montserrat-Regular, sans-serif',\n          markers: {\n            width: 10,\n            height: 10,\n            borderRadius: 10,\n            strokeWidth: 0\n          },\n          itemMargin: {\n            horizontal: 5,\n            vertical: 15\n          },\n          formatter: (seriesName, opts) => {\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\n          }\n        },\n        colors: this.dataSource.colors,\n        responsive: [{\n          breakpoint: 1000,\n          options: {\n            plotOptions: {\n              bar: {\n                horizontal: true\n              }\n            }\n          }\n        }]\n      };\n    }\n  }\n};","map":{"version":3,"names":["ApexChart","name","components","props","height","type","Number","String","default","width","dataSource","Object","required","series","categories","colors","percentChanges","computed","chartOptions","chart","stacked","animations","enabled","speed","toolbar","show","plotOptions","bar","horizontal","barHeight","dataLabels","position","offsetX","style","fontSize","fontWeight","fontFamily","formatter","val","toFixed","annotations","texts","map","category","index","total","forEach","serie","data","percentChange","length","find","item","year","change","color","startsWith","console","log","x","xAxisIndex","yAxisIndex","text","textAnchor","foreColor","background","fill","stroke","offsetY","grid","tooltip","shared","intersect","custom","seriesIndex","dataPointIndex","w","config","xaxis","value","globals","labels","axisBorder","axisTicks","yaxis","legend","markers","borderRadius","strokeWidth","itemMargin","vertical","seriesName","opts","responsive","breakpoint","options"],"sources":["src/components/ValChart.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chartContainer\" :style=\"{ position: 'relative', height: height + 'px' }\">\r\n    <ApexChart\r\n      type=\"bar\"\r\n      :height=\"height\"\r\n      :width=\"width\"\r\n      :options=\"chartOptions\"\r\n      :series=\"dataSource.series\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ApexChart from 'vue-apexcharts';\r\n\r\nexport default {\r\n  name: 'ValChart',\r\n  components: { ApexChart },\r\n  props: {\r\n    height: {\r\n      type: [Number, String],\r\n      default: 250,\r\n    },\r\n    width: {\r\n      type: [Number, String],\r\n      default: '95%',\r\n    },\r\n    dataSource: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => ({\r\n        series: [],\r\n        categories: [],\r\n        colors: [],\r\n        percentChanges: [],\r\n      }),\r\n    },\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      const percentChanges = this.dataSource.percentChanges || []; \r\n      return {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          height: this.height,\r\n          animations: {\r\n            enabled: true,\r\n            speed: 800,\r\n          },\r\n          toolbar: { show: false },\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            barHeight: '70%',\r\n            dataLabels: {\r\n              position: 'center',\r\n            },\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: true, \r\n          offsetX: -6, \r\n          style: {\r\n            fontSize: '11px',\r\n            fontWeight: 400,\r\n            fontFamily: 'Montserrat-Regular',\r\n            colors: ['#ffffff'], \r\n          },\r\n          formatter: (val) => val.toFixed(1), \r\n        },\r\n        annotations: {\r\n          texts: this.dataSource.categories.map((category, index) => {\r\n            let total = 0;\r\n            this.dataSource.series.forEach((serie) => {\r\n              if (serie.data && typeof serie.data[index] === 'number') {\r\n                total += serie.data[index];\r\n              }\r\n            });\r\n            const percentChange = percentChanges && percentChanges.length\r\n              ? percentChanges.find((item) => item.year === category)\r\n              : null;\r\n            const change = percentChange?.change || '0%';\r\n            const color = change.startsWith('-') ? '#FF4D4F' : '#52C41A';\r\n            console.log(`Category: ${category}, Change: ${change}, Total: ${total}, X: ${total + 30}`);\r\n            return {\r\n              x: total, \r\n              xAxisIndex: 0, \r\n              yAxisIndex: index, \r\n              text: `${change}\\n${total.toFixed(2)}`,\r\n              textAnchor: 'start',\r\n              foreColor: color,\r\n              fontSize: '11px',\r\n              fontFamily: 'Montserrat-Regular',\r\n              fontWeight: 400,\r\n              background: {\r\n                fill: '#ffffff',\r\n                stroke: 'none',\r\n              },\r\n              offsetX: 30, \r\n              offsetY: 0,\r\n            };\r\n          }),\r\n        },\r\n        grid: { show: false },\r\n        stroke: { show: false },\r\n        tooltip: {\r\n          shared: false,\r\n          intersect: true,\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n            const category = w.config.xaxis.categories[dataPointIndex];\r\n            const value = series[seriesIndex][dataPointIndex];\r\n            const color = w.globals.colors[seriesIndex];\r\n            return `\r\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\r\n                <strong>${category}:</strong> ${value}\r\n              </div>\r\n            `;\r\n          },\r\n        },\r\n        xaxis: {\r\n          categories: this.dataSource.categories,\r\n          labels: {\r\n            style: {\r\n              colors: '#ffffff',\r\n              fontSize: '11px',\r\n            },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            offsetX: 5,\r\n            style: { colors: '#ffffff' },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          offsetY: -10,\r\n          fontSize: '9px',\r\n          fontFamily: 'Montserrat-Regular, sans-serif',\r\n          markers: {\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: 10,\r\n            strokeWidth: 0,\r\n          },\r\n          itemMargin: {\r\n            horizontal: 5,\r\n            vertical: 15,\r\n          },\r\n          formatter: (seriesName, opts) => {\r\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\r\n          },\r\n        },\r\n        colors: this.dataSource.colors,\r\n        responsive: [\r\n          {\r\n            breakpoint: 1000,\r\n            options: {\r\n              plotOptions: {\r\n                bar: { horizontal: true },\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}