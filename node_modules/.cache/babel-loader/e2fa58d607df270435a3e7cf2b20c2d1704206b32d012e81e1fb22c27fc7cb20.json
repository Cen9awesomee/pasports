{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport MapSvg from '@/assets/map.svg';\nexport default {\n  components: {\n    MapSvg\n  },\n  props: {\n    regionItems: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      selectedRegion: null,\n      tooltipVisible: false,\n      tooltipText: '',\n      tooltipX: 0,\n      tooltipY: 0,\n      defaultViewBox: '0 0 29252.3 16557.2',\n      currentViewBox: '0 0 29252.3 16557.2',\n      zoomLevel: 1\n    };\n  },\n  mounted() {\n    this.updateSvgText();\n    this.updateSvgClasses();\n  },\n  methods: {\n    handleSvgClick(event) {\n      const path = event.target.closest('path');\n      if (path) {\n        const regionId = this.getRegionIdFromClass(path);\n        if (regionId) {\n          this.selectRegion(regionId);\n        }\n      }\n    },\n    handleSvgMouseEnter(event) {\n      const path = event.target.closest('path');\n      if (path) {\n        const regionId = this.getRegionIdFromClass(path);\n        const region = this.regionItems.find(r => r.id === regionId);\n        const regionName = region ? region.name : 'Неизвестный регион';\n        this.showTooltip(regionName, event);\n      }\n    },\n    getRegionIdFromClass(element) {\n      const classList = element.classList;\n      const filClass = Array.from(classList).find(cls => cls.startsWith('fil'));\n      return filClass ? filClass.replace('fil', '') : null;\n    },\n    selectRegion(regionId) {\n      this.selectedRegion = regionId;\n      this.centerRegion(regionId);\n      this.updateSvgClasses();\n      this.$emit('region-selected', regionId);\n    },\n    resetToDefault() {\n      this.selectedRegion = null;\n      this.currentViewBox = this.defaultViewBox;\n      this.zoomLevel = 1;\n      this.updateSvgClasses();\n      this.$emit('region-selected', null);\n    },\n    centerRegion(regionId) {\n      const svg = this.$el.querySelector('.svg-map');\n      const path = svg.querySelector(`.fil${regionId}`);\n      if (path) {\n        const bbox = path.getBBox();\n        const container = this.$el.querySelector('.map-container');\n        let zoomFactor = 1.5;\n        if (container) {\n          const containerWidth = container.clientWidth;\n          const containerHeight = container.clientHeight;\n          zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8;\n        }\n        const newWidth = bbox.width * zoomFactor;\n        const newHeight = bbox.height * zoomFactor;\n        const centerX = bbox.x + bbox.width / 2;\n        const centerY = bbox.y + bbox.height / 2;\n        const newX = centerX - newWidth / 2;\n        const newY = centerY - newHeight / 2;\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\n        this.zoomLevel = zoomFactor;\n      }\n    },\n    updateSvgClasses() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) return;\n      const paths = svg.querySelectorAll('path');\n      paths.forEach(path => {\n        const regionId = this.getRegionIdFromClass(path);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          path.classList.add('hidden');\n        } else {\n          path.classList.remove('hidden');\n        }\n      });\n      const texts = svg.querySelectorAll('text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          text.classList.add('hidden');\n        } else {\n          text.classList.remove('hidden');\n        }\n      });\n    },\n    updateSvgText() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) return;\n      const texts = svg.querySelectorAll('text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        const region = this.regionItems.find(r => r.id === regionId);\n        if (region && region.percentage) {\n          text.textContent = `${region.percentage}%`;\n        }\n      });\n    },\n    showTooltip(text, event) {\n      this.tooltipText = text;\n      this.tooltipVisible = true;\n      this.tooltipX = event.clientX;\n      this.tooltipY = event.clientY;\n    },\n    hideTooltip() {\n      this.tooltipVisible = false;\n    }\n  },\n  watch: {\n    selectedRegion() {\n      this.updateSvgClasses();\n    },\n    regionItems: {\n      handler() {\n        this.updateSvgText();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["MapSvg","components","props","regionItems","type","Array","required","default","data","selectedRegion","tooltipVisible","tooltipText","tooltipX","tooltipY","defaultViewBox","currentViewBox","zoomLevel","mounted","updateSvgText","updateSvgClasses","methods","handleSvgClick","event","path","target","closest","regionId","getRegionIdFromClass","selectRegion","handleSvgMouseEnter","region","find","r","id","regionName","name","showTooltip","element","classList","filClass","from","cls","startsWith","replace","centerRegion","$emit","resetToDefault","svg","$el","querySelector","bbox","getBBox","container","zoomFactor","containerWidth","clientWidth","containerHeight","clientHeight","Math","min","width","height","newWidth","newHeight","centerX","x","centerY","y","newX","newY","paths","querySelectorAll","forEach","add","remove","texts","text","percentage","textContent","clientX","clientY","hideTooltip","watch","handler","deep"],"sources":["src/components/MapComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <MapSvg\r\n      :viewBox=\"currentViewBox\"\r\n      class=\"svg-map\"\r\n      @click=\"handleSvgClick\"\r\n      @mouseenter=\"handleSvgMouseEnter\"\r\n      @mouseleave=\"hideTooltip\"\r\n    />\r\n    <div v-if=\"tooltipVisible\" class=\"tooltip\" :style=\"{ left: tooltipX + 'px', top: tooltipY + 'px' }\">\r\n      {{ tooltipText }}\r\n    </div>\r\n    <button v-if=\"selectedRegion !== null\" class=\"reset-btn\" @click=\"resetToDefault\">\r\n      <i class=\"fa-solid fa-earth-americas\"></i>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MapSvg from '@/assets/map.svg';\r\nexport default {\r\n  components: {\r\n    MapSvg,\r\n  },\r\n  props: {\r\n    regionItems: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => [],\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      selectedRegion: null,\r\n      tooltipVisible: false,\r\n      tooltipText: '',\r\n      tooltipX: 0,\r\n      tooltipY: 0,\r\n      defaultViewBox: '0 0 29252.3 16557.2',\r\n      currentViewBox: '0 0 29252.3 16557.2',\r\n      zoomLevel: 1,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.updateSvgText();\r\n    this.updateSvgClasses();\r\n  },\r\n  methods: {\r\n    handleSvgClick(event) {\r\n      const path = event.target.closest('path');\r\n      if (path) {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (regionId) {\r\n          this.selectRegion(regionId);\r\n        }\r\n      }\r\n    },\r\n    handleSvgMouseEnter(event) {\r\n      const path = event.target.closest('path');\r\n      if (path) {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        const region = this.regionItems.find((r) => r.id === regionId);\r\n        const regionName = region ? region.name : 'Неизвестный регион';\r\n        this.showTooltip(regionName, event);\r\n      }\r\n    },\r\n    getRegionIdFromClass(element) {\r\n      const classList = element.classList;\r\n      const filClass = Array.from(classList).find((cls) => cls.startsWith('fil'));\r\n      return filClass ? filClass.replace('fil', '') : null;\r\n    },\r\n    selectRegion(regionId) {\r\n      this.selectedRegion = regionId;\r\n      this.centerRegion(regionId);\r\n      this.updateSvgClasses();\r\n      this.$emit('region-selected', regionId);\r\n    },\r\n    resetToDefault() {\r\n      this.selectedRegion = null;\r\n      this.currentViewBox = this.defaultViewBox;\r\n      this.zoomLevel = 1;\r\n      this.updateSvgClasses();\r\n      this.$emit('region-selected', null);\r\n    },\r\n    centerRegion(regionId) {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      const path = svg.querySelector(`.fil${regionId}`);\r\n      if (path) {\r\n        const bbox = path.getBBox();\r\n        const container = this.$el.querySelector('.map-container');\r\n        let zoomFactor = 1.5;\r\n        if (container) {\r\n          const containerWidth = container.clientWidth;\r\n          const containerHeight = container.clientHeight;\r\n          zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8;\r\n        }\r\n        const newWidth = bbox.width * zoomFactor;\r\n        const newHeight = bbox.height * zoomFactor;\r\n        const centerX = bbox.x + bbox.width / 2;\r\n        const centerY = bbox.y + bbox.height / 2;\r\n        const newX = centerX - newWidth / 2;\r\n        const newY = centerY - newHeight / 2;\r\n\r\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\r\n        this.zoomLevel = zoomFactor;\r\n      }\r\n    },\r\n    updateSvgClasses() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (!svg) return;\r\n      const paths = svg.querySelectorAll('path');\r\n      paths.forEach((path) => {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          path.classList.add('hidden');\r\n        } else {\r\n          path.classList.remove('hidden');\r\n        }\r\n      });\r\n      const texts = svg.querySelectorAll('text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          text.classList.add('hidden');\r\n        } else {\r\n          text.classList.remove('hidden');\r\n        }\r\n      });\r\n    },\r\n    updateSvgText() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (!svg) return;\r\n      const texts = svg.querySelectorAll('text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        const region = this.regionItems.find((r) => r.id === regionId);\r\n        if (region && region.percentage) {\r\n          text.textContent = `${region.percentage}%`;\r\n        }\r\n      });\r\n    },\r\n    showTooltip(text, event) {\r\n      this.tooltipText = text;\r\n      this.tooltipVisible = true;\r\n      this.tooltipX = event.clientX;\r\n      this.tooltipY = event.clientY;\r\n    },\r\n    hideTooltip() {\r\n      this.tooltipVisible = false;\r\n    },\r\n  },\r\n  watch: {\r\n    selectedRegion() {\r\n      this.updateSvgClasses();\r\n    },\r\n    regionItems: {\r\n      handler() {\r\n        this.updateSvgText();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.grid-container {\r\n  display: flex;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  grid-template-rows: auto auto;\r\n  gap: 10px;\r\n  font-family: 'Montserrat-Regular';\r\n  padding-right: 10px;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n}\r\n.svg-wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.chart-card {\r\n  position: relative;\r\n  background-color: #2e2c2c;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%; \r\n  height: calc(100vh / 2 - 32px); \r\n  overflow: hidden;\r\n}\r\n\r\n.chart-card-first {\r\n  grid-column: 1; \r\n  width: 50%;\r\n  height: calc(100vh / 2 - 32px);\r\n  overflow: hidden;\r\n  \r\n}\r\n\r\n.chart-card-second {\r\n  grid-column: 2; \r\n  width: 44%;\r\n  height: calc(100vh / 2 - 32px);\r\n  flex: 1 1 calc(6% - 10px); \r\n}\r\n\r\n.chart-card-third {  \r\n  width: 76%; \r\n  height: calc(100vh / 2 - 32px);\r\n  flex: 1 1 calc(33% - 10px);  \r\n}\r\n\r\n\r\n.chart-card-four, \r\n.chart-card-five,\r\n.chart-card-six,\r\n.chart-card-seven { \r\n  width: 100%;\r\n  height: calc(100vh / 2 - 32px);\r\n}\r\n\r\n.chart-card-four {\r\n  flex: 1 1 calc(25% - 10px); \r\n}\r\n\r\n.chart-card-five {\r\n  flex: 1 1 calc(25% - 10px);  \r\n}\r\n\r\n.chart-card-six {\r\n  flex: 1 1 calc(25% - 10px);  \r\n}\r\n\r\n.chart-card-seven {\r\n  flex: 1 1 calc(25% - 10px);  \r\n}\r\n\r\n.card-header {\r\n  font-size: 15px;\r\n  color: #ffffff;\r\n  background-color: #4d4a4a;\r\n  padding: 7px;\r\n  text-align: left;\r\n  border-radius: 10px 10px 0 0;\r\n}\r\n\r\n.card-content {\r\n  padding: 10px;\r\n  flex-grow: 1;\r\n}\r\n.ring-chart-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n\r\n.radialBarfour-chart-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around; \r\n  gap: 15px; \r\n  padding: 0 10px; \r\n  box-sizing: border-box; \r\n}\r\n\r\n.radialBarfour-chart-item {\r\n  flex: 1; \r\n  max-width: 50%; \r\n  text-align: center;\r\n}\r\n\r\n.chart-labels-top {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  \r\n}\r\n\r\n.chart-label {\r\n  font-size: 14px;\r\n  color: #ffffff;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n    \r\n.chart-number-first {\r\n  font-size: 22px;\r\n  color: #fcb040; \r\n  margin-bottom: -10px;\r\n}\r\n\r\n.chart-number-bottom-first {\r\n  font-size: 22px;\r\n  color: #fcb040; \r\n  margin-top: -10px;\r\n}\r\n\r\n\r\n.chart-number-second {\r\n  font-size: 22px;\r\n  color: #39b54a; \r\n  margin-bottom: -10px;\r\n}\r\n\r\n.chart-number-bottom-second {\r\n  font-size: 22px;\r\n  color: #39b54a; \r\n  margin-top: -10px;\r\n}\r\n\r\n.criteria-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around; \r\n  height: 100%; \r\n}\r\n\r\n.criteria-item {\r\n  font-size: 14px;\r\n  color: #ffffff;\r\n  text-align: center; \r\n}\r\n.criteria-item i {\r\n  margin-right: 5px; \r\n  font-size: 12px;\r\n}\r\n.green-light {\r\n  color: #00ff00; \r\n}\r\n\r\n.green-medium-light {\r\n  color: #1ed013; \r\n}\r\n\r\n.green-medium {\r\n  color: #24a319; \r\n}\r\n\r\n.green-medium-dark {\r\n  color: #247719; \r\n}\r\n\r\n.green-dark {\r\n  color: #1f4f16; \r\n}\r\n\r\n.region-quota-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.region-header {\r\n  flex: 1;\r\n  text-align: left;\r\n  font-size: 11px;\r\n  color: #ffffff;   \r\n  background-color: #4b3f3f; \r\n  border-radius: 4px; \r\n  padding: 5px 10px;\r\n  cursor: pointer;\r\n}\r\n.region-header:hover {\r\n  background-color: #666; \r\n}\r\n\r\n.quota-header {\r\n  flex: 0.3;\r\n  text-align: left;\r\n  margin-right: 20px;\r\n  font-size: 11px;\r\n  color: #ffffff;\r\n  padding: 5px 5px;\r\n  background-color: #4b3f3f; \r\n  border-radius: 4px; \r\n  padding: 5px 10px;\r\n  cursor: pointer;\r\n}\r\n.quota-header:hover {\r\n  background-color: #666; \r\n}\r\n\r\n\r\n.region-quota-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  font-size: 11px;\r\n  color: #ffffff;\r\n  max-height: 200px; \r\n  overflow-y: auto;  \r\n  margin-left: 10px;\r\n}\r\n\r\n.region-quota-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.region {\r\n  flex: 1;\r\n  text-align: left;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.quota-bar {\r\n  flex: 0.3;\r\n  background-color: #2f522b; \r\n  border-radius: 2px;\r\n  position: relative;\r\n  height: 18px; \r\n  width: 100%;\r\n  margin-right: 20px;\r\n  \r\n}\r\n\r\n.quota-fill {\r\n  background-color: #4caf50; \r\n  height: 100%;\r\n  position: absolute;\r\n  border-radius: 2px;\r\n  color: #ffffff;\r\n  line-height: 20px; \r\n  font-size: 12px;\r\n}\r\n.quota-text {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  color: #ffffff;\r\n  line-height: 20px; \r\n  font-size: 12px;\r\n}\r\n\r\n\r\n.region-quota-list::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n.region-quota-list::-webkit-scrollbar-thumb {\r\n  background-color: #888; \r\n  border-radius: 4px;\r\n}\r\n\r\n.region-quota-list::-webkit-scrollbar-thumb:hover {\r\n  background-color: #555; \r\n}\r\n.svg-map .str0 {\r\n  stroke: #252429;\r\n  stroke-width: 25;\r\n  transition: 600ms;\r\n  cursor: pointer;\r\n}\r\n\r\n.svg-map .fnt0, .svg-map .fnt-city {\r\n  font-weight: normal;\r\n  font-size: 700px;\r\n  fill: #fff;\r\n  cursor: pointer;\r\n}\r\n.map-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex; \r\n  justify-content: center;\r\n  align-items: right;\r\n  overflow: hidden;\r\n  \r\n}\r\n\r\n.svg-map {\r\n  width: 75%;\r\n  height: auto; \r\n  max-width: 100%;\r\n  max-height: 100%;;\r\n}\r\n.region {\r\n  transition: transform 0.5s ease, opacity 0.5s ease;\r\n}\r\n\r\n.tooltip {\r\n  position: absolute;\r\n  background: rgba(82, 79, 79, 0.7);\r\n  color: white;\r\n  padding: 2px;\r\n  border-radius: 4px;\r\n  font-size: 15px;\r\n  transition: opacity 0.3s;\r\n  opacity: 0.8; \r\n  top: 40%; \r\n  left: 50%; \r\n  transform: translate(-50%, -50%);\r\n}\r\n.reset-btn {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  left: 10px;\r\n  padding: 2px 4px;\r\n  background-color: rgb(56, 52, 52); \r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  z-index: 1000; \r\n}\r\n.reset-btn:hover {\r\n  background-color: #555352;\r\n}\r\n.hidden {\r\n    opacity: 0; \r\n    pointer-events: none; \r\n    \r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}