{"ast":null,"code":"import ApexChart from 'vue-apexcharts';\nexport default {\n  name: 'PopulationChart',\n  components: {\n    ApexChart\n  },\n  props: {\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '100%'\n    },\n    dataSource: {\n      type: Object,\n      required: true,\n      default: () => ({\n        series: [],\n        categories: [],\n        colors: [],\n        customTotals: []\n      })\n    }\n  },\n  data() {\n    return {\n      horizontalTotal: true\n    };\n  },\n  computed: {\n    chartOptions() {\n      return {\n        chart: {\n          type: 'bar',\n          stacked: true,\n          height: '100%',\n          fontFamily: 'Montserrat-Regular',\n          animations: {\n            enabled: true,\n            speed: 800\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        dataLabels: {\n          enabled: true,\n          position: 'center',\n          offsetX: -6,\n          style: {\n            fontSize: '11px',\n            fontWeight: 400,\n            colors: ['#ffffff']\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            barHeight: '70%',\n            dataLabels: {\n              total: {\n                enabled: this.horizontalTotal,\n                offsetX: 10,\n                offsetY: -10,\n                style: {\n                  color: '#fff',\n                  fontSize: '11px',\n                  fontWeight: 'normal',\n                  whiteSpace: 'pre-line'\n                },\n                formatter: function (val, opts) {\n                  if (!this.horizontalTotal) return '';\n                  const customData = this?.dataSource?.customTotals[opts.dataPointIndex];\n                  if (!customData) return '';\n                  const [percent, total] = customData;\n                  const color = percent.includes('-') ? '#f44336' : '#43A047';\n                  opts.w.config.plotOptions.bar.dataLabels.total.style.color = color;\n                  return [percent, total.toFixed(1)];\n                }.bind(this)\n              }\n            }\n          }\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            const category = w.config.xaxis.categories[dataPointIndex];\n            const value = series[seriesIndex][dataPointIndex];\n            const color = w.globals.colors[seriesIndex];\n            return `\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\n                <strong>${category}:</strong> ${value}\n              </div>\n            `;\n          }\n        },\n        xaxis: {\n          categories: this.dataSource.categories,\n          labels: {\n            style: {\n              colors: '#ffffff',\n              fontSize: '11px'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        yaxis: {\n          labels: {\n            offsetX: 5,\n            style: {\n              colors: '#ffffff'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        legend: {\n          position: 'bottom',\n          offsetY: -10,\n          fontSize: '9px',\n          markers: {\n            width: 10,\n            height: 10,\n            borderRadius: 10,\n            strokeWidth: 0\n          },\n          itemMargin: {\n            horizontal: 5,\n            vertical: 15\n          },\n          formatter: (seriesName, opts) => {\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\n          }\n        },\n        colors: this.dataSource.colors\n      };\n    }\n  }\n};","map":{"version":3,"names":["ApexChart","name","components","props","width","type","String","default","height","dataSource","Object","required","series","categories","colors","customTotals","data","horizontalTotal","computed","chartOptions","chart","stacked","fontFamily","animations","enabled","speed","toolbar","show","dataLabels","position","offsetX","style","fontSize","fontWeight","plotOptions","bar","horizontal","barHeight","total","offsetY","color","whiteSpace","formatter","val","opts","customData","dataPointIndex","percent","includes","w","config","toFixed","bind","grid","stroke","tooltip","shared","intersect","custom","seriesIndex","category","xaxis","value","globals","labels","axisBorder","axisTicks","yaxis","legend","markers","borderRadius","strokeWidth","itemMargin","vertical","seriesName"],"sources":["src/components/charts/PopulationChart.vue"],"sourcesContent":["<template>\r\n  <ApexChart\r\n    type=\"bar\"\r\n    :width=\"width\"\r\n    :height=\"height\"\r\n    :options=\"chartOptions\"\r\n    :series=\"dataSource.series\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport ApexChart from 'vue-apexcharts';\r\n\r\nexport default {\r\n  name: 'PopulationChart',\r\n  components: {\r\n    ApexChart,\r\n  },\r\n  props: {\r\n    width: {\r\n      type: String,\r\n      default: '100%',\r\n    },\r\n    height: {\r\n      type: String,\r\n      default: '100%',\r\n    },\r\n    dataSource: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => ({\r\n        series: [],\r\n        categories: [],\r\n        colors: [],\r\n        customTotals: [],\r\n      }),\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      horizontalTotal: true,\r\n    };\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      return {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          height: '100%',\r\n          fontFamily: 'Montserrat-Regular',\r\n          animations: {\r\n            enabled: true,\r\n            speed: 800,\r\n          },\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          position: 'center',\r\n          offsetX: -6,\r\n          style: {\r\n            fontSize: '11px',\r\n            fontWeight: 400,\r\n            colors: ['#ffffff'],\r\n          },\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            barHeight: '70%',\r\n            dataLabels: {\r\n              total: {\r\n                enabled: this.horizontalTotal,\r\n                offsetX: 10,\r\n                offsetY: -10,\r\n                style: {\r\n                  color: '#fff',\r\n                  fontSize: '11px',\r\n                  fontWeight: 'normal',\r\n                  whiteSpace: 'pre-line',\r\n                },\r\n                formatter: function (val, opts) {\r\n                  if (!this.horizontalTotal) return '';\r\n                  const customData = this?.dataSource?.customTotals[opts.dataPointIndex];\r\n                  if (!customData) return '';\r\n                  const [percent, total] = customData;\r\n                  const color = percent.includes('-') ? '#f44336' : '#43A047';\r\n                  opts.w.config.plotOptions.bar.dataLabels.total.style.color = color;\r\n                  return [percent, total.toFixed(1)];\r\n                }.bind(this),\r\n              },\r\n            },\r\n          },\r\n        },\r\n        grid: {\r\n          show: false,\r\n        },\r\n        stroke: {\r\n          show: false,\r\n        },\r\n        tooltip: {\r\n          shared: false,\r\n          intersect: true,\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n            const category = w.config.xaxis.categories[dataPointIndex];\r\n            const value = series[seriesIndex][dataPointIndex];\r\n            const color = w.globals.colors[seriesIndex];\r\n            return `\r\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\r\n                <strong>${category}:</strong> ${value}\r\n              </div>\r\n            `;\r\n          },\r\n        },\r\n        xaxis: {\r\n          categories: this.dataSource.categories,\r\n          labels: {\r\n            style: {\r\n              colors: '#ffffff',\r\n              fontSize: '11px',\r\n            },\r\n          },\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n          axisTicks: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            offsetX: 5,\r\n            style: {\r\n              colors: '#ffffff',\r\n            },\r\n          },\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n          axisTicks: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          offsetY: -10,\r\n          fontSize: '9px',\r\n          markers: {\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: 10,\r\n            strokeWidth: 0,\r\n          },\r\n          itemMargin: {\r\n            horizontal: 5,\r\n            vertical: 15,\r\n          },\r\n          formatter: (seriesName, opts) => {\r\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\r\n          },\r\n        },\r\n        colors: this.dataSource.colors,\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}