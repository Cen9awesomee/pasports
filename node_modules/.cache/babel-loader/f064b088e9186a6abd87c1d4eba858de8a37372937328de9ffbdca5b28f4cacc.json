{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport ApexChart from 'vue-apexcharts';\nexport default {\n  name: 'ValChart',\n  components: {\n    ApexChart\n  },\n  props: {\n    height: {\n      type: [Number, String],\n      default: 250\n    },\n    width: {\n      type: [Number, String],\n      default: '100%'\n    },\n    dataSource: {\n      type: Object,\n      required: true,\n      default: () => ({\n        series: [],\n        categories: [],\n        colors: [],\n        percentChanges: []\n      })\n    }\n  },\n  computed: {\n    chartOptions() {\n      return {\n        chart: {\n          type: 'bar',\n          stacked: true,\n          height: this.height,\n          animations: {\n            enabled: true,\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            dataLabels: {\n              position: 'center'\n            }\n          }\n        },\n        dataLabels: {\n          enabled: true,\n          offsetX: -6,\n          formatter: (val, {\n            series,\n            dataPointIndex\n          }) => {\n            const total = series.reduce((sum, s) => sum + (s[dataPointIndex] || 0), 0);\n            const percentChange = dataSource.percentChanges.find(item => item.year === dataSource.categories[dataPointIndex]);\n            const change = percentChange ? percentChange.change : '0%';\n            const isNegative = change.startsWith('-');\n            const color = isNegative ? '#FF0000' : '#00FF00';\n            return [`<svg>\n          <text x=\"0\" y=\"-4\" fill=\"${color}\" font-size=\"12\" font-family=\"Montserrat, sans-serif\" font-weight=\"bold\" text-anchor=\"start\">${change}</text>\n          <text x=\"0\" y=\"10\" fill=\"${color}\" font-size=\"14\" font-family=\"Montserrat, sans-serif\" font-weight=\"bold\" text-anchor=\"start\">${total.toFixed(2)}</text>\n        </svg>`];\n          },\n          style: {\n            fontSize: '12px',\n            fontWeight: 400,\n            colors: ['#ffffff'],\n            fontFamily: 'Montserrat, sans-serif'\n          },\n          useHTML: true\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          style: {\n            fontFamily: 'Montserrat-Regular, sans-serif',\n            fontSize: '10px'\n          },\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            const category = w.config.xaxis.categories[dataPointIndex];\n            const value = series[seriesIndex][dataPointIndex];\n            const color = w.globals.colors[seriesIndex];\n            return `\n              <div style=\"padding: 5px; background: ${color}; color: #fff; border-radius: 0; font-size: 10px; border: none;\">\n                <strong>${category}:</strong> ${value}\n              </div>\n            `;\n          }\n        },\n        xaxis: {\n          categories: this.dataSource.categories,\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          labels: {\n            style: {\n              colors: '#ffffff',\n              fontSize: '11px'\n            }\n          }\n        },\n        yaxis: {\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          labels: {\n            show: true,\n            offsetX: 5,\n            formatter: val => val,\n            style: {\n              colors: '#ffffff'\n            }\n          }\n        },\n        legend: {\n          position: 'bottom',\n          offsetY: -10,\n          offsetX: 15,\n          fontSize: '9px',\n          fontFamily: 'Montserrat-Regular, sans-serif',\n          markers: {\n            width: 10,\n            height: 10,\n            borderRadius: 10,\n            strokeWidth: 0\n          },\n          itemMargin: {\n            horizontal: 5,\n            vertical: 15\n          },\n          formatter: (seriesName, opts) => {\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\n          }\n        },\n        colors: this.dataSource.colors,\n        responsive: [{\n          breakpoint: 1000,\n          options: {\n            plotOptions: {\n              bar: {\n                horizontal: true\n              }\n            }\n          }\n        }]\n      };\n    }\n  }\n};","map":{"version":3,"names":["ApexChart","name","components","props","height","type","Number","String","default","width","dataSource","Object","required","series","categories","colors","percentChanges","computed","chartOptions","chart","stacked","animations","enabled","speed","animateGradually","delay","dynamicAnimation","toolbar","show","plotOptions","bar","horizontal","dataLabels","position","offsetX","formatter","val","dataPointIndex","total","reduce","sum","s","percentChange","find","item","year","change","isNegative","startsWith","color","toFixed","style","fontSize","fontWeight","fontFamily","useHTML","grid","stroke","tooltip","shared","intersect","custom","seriesIndex","w","category","config","xaxis","value","globals","axisBorder","axisTicks","labels","yaxis","legend","offsetY","markers","borderRadius","strokeWidth","itemMargin","vertical","seriesName","opts","responsive","breakpoint","options"],"sources":["src/components/ValChart.vue"],"sourcesContent":["<template>\r\n    <ApexChart\r\n      type=\"bar\"\r\n      :height=\"height\"\r\n      :width=\"width\"\r\n      :options=\"chartOptions\"\r\n      :series=\"dataSource.series\"\r\n    ></ApexChart>\r\n  </template>\r\n  \r\n  <script>\r\n  import ApexChart from 'vue-apexcharts';\r\n  \r\n  export default {\r\n    name: 'ValChart',\r\n    components: {\r\n      ApexChart,\r\n    },\r\n    props: {\r\n    height: {\r\n      type: [Number, String],\r\n      default: 250,\r\n    },\r\n    width: {\r\n      type: [Number, String],\r\n      default: '100%',\r\n    },\r\n    dataSource: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => ({\r\n        series: [],\r\n        categories: [],\r\n        colors: [],\r\n        percentChanges: [],\r\n      }),\r\n    },\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      return {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          height: this.height,\r\n          animations: {\r\n            enabled: true,\r\n            speed: 800,\r\n            animateGradually: {\r\n              enabled: true,\r\n              delay: 150,\r\n            },\r\n            dynamicAnimation: {\r\n              enabled: true,\r\n              speed: 350,\r\n            },\r\n          },\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          \r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            dataLabels: {\r\n              position: 'center',\r\n            },\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          offsetX: -6,\r\n          formatter: (val, { series, dataPointIndex }) => {\r\n      const total = series.reduce((sum, s) => sum + (s[dataPointIndex] || 0), 0);\r\n      const percentChange = dataSource.percentChanges.find(\r\n        (item) => item.year === dataSource.categories[dataPointIndex]\r\n      );\r\n      const change = percentChange ? percentChange.change : '0%';\r\n      const isNegative = change.startsWith('-');\r\n      const color = isNegative ? '#FF0000' : '#00FF00';\r\n      return [\r\n        `<svg>\r\n          <text x=\"0\" y=\"-4\" fill=\"${color}\" font-size=\"12\" font-family=\"Montserrat, sans-serif\" font-weight=\"bold\" text-anchor=\"start\">${change}</text>\r\n          <text x=\"0\" y=\"10\" fill=\"${color}\" font-size=\"14\" font-family=\"Montserrat, sans-serif\" font-weight=\"bold\" text-anchor=\"start\">${total.toFixed(2)}</text>\r\n        </svg>`,\r\n      ];\r\n    },\r\n    style: {\r\n      fontSize: '12px',\r\n      fontWeight: 400,\r\n      colors: ['#ffffff'],\r\n      fontFamily: 'Montserrat, sans-serif',\r\n    },\r\n    useHTML: true,\r\n  },\r\n        grid: {\r\n          show: false,\r\n        },\r\n        stroke: {\r\n          show: false,\r\n        },\r\n        tooltip: {\r\n          shared: false,\r\n          intersect: true,\r\n          style: {\r\n            fontFamily: 'Montserrat-Regular, sans-serif',\r\n            fontSize: '10px',\r\n          },\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n            const category = w.config.xaxis.categories[dataPointIndex];\r\n            const value = series[seriesIndex][dataPointIndex];\r\n            const color = w.globals.colors[seriesIndex];\r\n            return `\r\n              <div style=\"padding: 5px; background: ${color}; color: #fff; border-radius: 0; font-size: 10px; border: none;\">\r\n                <strong>${category}:</strong> ${value}\r\n              </div>\r\n            `;\r\n          },\r\n        },\r\n        xaxis: {\r\n          categories: this.dataSource.categories,\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n          axisTicks: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#ffffff',\r\n              fontSize: '11px',\r\n            },\r\n          },\r\n        },\r\n        yaxis: {\r\n          axisBorder: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n          axisTicks: {\r\n            show: true,\r\n            color: '#4b3f3f',\r\n          },\r\n          labels: {\r\n            show: true,\r\n            offsetX: 5,\r\n            formatter: (val) => val,\r\n            style: {\r\n              colors: '#ffffff',\r\n            },\r\n          },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          offsetY: -10,\r\n          offsetX: 15,\r\n          fontSize: '9px',\r\n          fontFamily: 'Montserrat-Regular, sans-serif',\r\n          markers: {\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: 10,\r\n            strokeWidth: 0,\r\n          },\r\n          itemMargin: {\r\n            horizontal: 5,\r\n            vertical: 15,\r\n          },\r\n          formatter: (seriesName, opts) => {\r\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\r\n          },\r\n        },\r\n        colors: this.dataSource.colors,\r\n        responsive: [\r\n          {\r\n            breakpoint: 1000,\r\n            options: {\r\n              plotOptions: {\r\n                bar: {\r\n                  horizontal: true,\r\n                },\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n};\r\n  </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}