{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport ApexChart from 'vue-apexcharts';\nexport default {\n  name: 'ValChart',\n  components: {\n    ApexChart\n  },\n  props: {\n    height: {\n      type: [Number, String],\n      default: 250\n    },\n    width: {\n      type: [Number, String],\n      default: '100%'\n    },\n    dataSource: {\n      type: Object,\n      required: true,\n      default: () => ({\n        series: [],\n        categories: [],\n        colors: [],\n        percentChanges: []\n      })\n    }\n  },\n  data() {\n    return {\n      customLabels: []\n    };\n  },\n  computed: {\n    chartOptions() {\n      return {\n        chart: {\n          type: 'bar',\n          stacked: true,\n          height: this.height,\n          animations: {\n            enabled: true,\n            speed: 800\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            barHeight: '70%',\n            dataLabels: {\n              position: 'center'\n            }\n          }\n        },\n        dataLabels: {\n          enabled: true,\n          offsetX: -6,\n          style: {\n            fontSize: '12px',\n            fontWeight: 400,\n            fontFamily: 'Montserrat, sans-serif'\n          }\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            const category = w.config.xaxis.categories[dataPointIndex];\n            const value = series[seriesIndex][dataPointIndex];\n            const color = w.globals.colors[seriesIndex];\n            return `\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\n                <strong>${category}:</strong> ${value}\n              </div>\n            `;\n          }\n        },\n        xaxis: {\n          categories: this.dataSource.categories,\n          labels: {\n            style: {\n              colors: '#ffffff',\n              fontSize: '11px'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        yaxis: {\n          labels: {\n            offsetX: 5,\n            style: {\n              colors: '#ffffff'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        legend: {\n          position: 'bottom',\n          offsetY: -10,\n          fontSize: '9px',\n          fontFamily: 'Montserrat-Regular, sans-serif',\n          markers: {\n            width: 10,\n            height: 10,\n            borderRadius: 10,\n            strokeWidth: 0\n          },\n          itemMargin: {\n            horizontal: 5,\n            vertical: 15\n          },\n          formatter: (seriesName, opts) => {\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\n          }\n        },\n        colors: this.dataSource.colors,\n        responsive: [{\n          breakpoint: 1000,\n          options: {\n            plotOptions: {\n              bar: {\n                horizontal: true\n              }\n            }\n          }\n        }]\n      };\n    }\n  },\n  methods: {\n    calculateLabelPositions() {\n      this.$nextTick(() => {\n        const chartEl = this.$refs.chartContainer?.querySelector('.apexcharts-inner');\n        if (!chartEl) return;\n        const barRects = chartEl.querySelectorAll('.apexcharts-bar-series .apexcharts-bar-area');\n        const containerRect = this.$refs.chartContainer.getBoundingClientRect();\n        if (barRects.length === 0) return;\n        this.customLabels = this.dataSource.categories.map((category, index) => {\n          const barEl = barRects[index];\n          if (!barEl) return null;\n          const barBox = barEl.getBoundingClientRect();\n          const top = barBox.top - containerRect.top + barBox.height / 2 - 10;\n          const left = chartEl.getBoundingClientRect().width + 10;\n          const percentChange = this.dataSource.percentChanges.find(item => item.year === category);\n          const change = percentChange?.change || '0%';\n          const isNegative = change.startsWith('-');\n          const color = isNegative ? '#FF4D4F' : '#52C41A';\n          let total = 0;\n          this.dataSource.series.forEach(serie => {\n            if (serie.data && typeof serie.data[index] === 'number') {\n              total += serie.data[index];\n            }\n          });\n          return {\n            top,\n            left,\n            change,\n            total: total.toFixed(2),\n            color\n          };\n        }).filter(Boolean);\n      });\n    }\n  },\n  watch: {\n    dataSource: {\n      handler() {\n        this.calculateLabelPositions();\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    window.addEventListener('resize', this.calculateLabelPositions);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.calculateLabelPositions);\n  }\n};","map":{"version":3,"names":["ApexChart","name","components","props","height","type","Number","String","default","width","dataSource","Object","required","series","categories","colors","percentChanges","data","customLabels","computed","chartOptions","chart","stacked","animations","enabled","speed","toolbar","show","plotOptions","bar","horizontal","barHeight","dataLabels","position","offsetX","style","fontSize","fontWeight","fontFamily","grid","stroke","tooltip","shared","intersect","custom","seriesIndex","dataPointIndex","w","category","config","xaxis","value","color","globals","labels","axisBorder","axisTicks","yaxis","legend","offsetY","markers","borderRadius","strokeWidth","itemMargin","vertical","formatter","seriesName","opts","responsive","breakpoint","options","methods","calculateLabelPositions","$nextTick","chartEl","$refs","chartContainer","querySelector","barRects","querySelectorAll","containerRect","getBoundingClientRect","length","map","index","barEl","barBox","top","left","percentChange","find","item","year","change","isNegative","startsWith","total","forEach","serie","toFixed","filter","Boolean","watch","handler","deep","mounted","window","addEventListener","beforeDestroy","removeEventListener"],"sources":["src/components/ValChart.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chartContainer\" :style=\"{ position: 'relative', height: height + 'px' }\">\r\n    <ApexChart\r\n      type=\"bar\"\r\n      :height=\"height\"\r\n      :width=\"width\"\r\n      :options=\"chartOptions\"\r\n      :series=\"dataSource.series\"\r\n      @mounted=\"calculateLabelPositions\"\r\n    />\r\n    <div\r\n      v-for=\"(label, index) in customLabels\"\r\n      :key=\"index\"\r\n      :style=\"{\r\n        position: 'absolute',\r\n        top: label.top + 'px',\r\n        left: label.left + 'px',\r\n        color: label.color,\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        fontFamily: 'Montserrat, sans-serif',\r\n        lineHeight: '1.2',\r\n        pointerEvents: 'none',\r\n      }\"\r\n    >\r\n      <div>{{ label.change }}</div>\r\n      <div>{{ label.total }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ApexChart from 'vue-apexcharts';\r\n\r\nexport default {\r\n  name: 'ValChart',\r\n  components: { ApexChart },\r\n  props: {\r\n    height: {\r\n      type: [Number, String],\r\n      default: 250,\r\n    },\r\n    width: {\r\n      type: [Number, String],\r\n      default: '100%',\r\n    },\r\n    dataSource: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => ({\r\n        series: [],\r\n        categories: [],\r\n        colors: [],\r\n        percentChanges: [],\r\n      }),\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      customLabels: [],\r\n    };\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      return {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          height: this.height,\r\n          animations: {\r\n            enabled: true,\r\n            speed: 800,\r\n          },\r\n          toolbar: { show: false },\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            barHeight: '70%',\r\n            dataLabels: {\r\n              position: 'center',\r\n            },\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          offsetX: -6,\r\n          style: {\r\n    fontSize: '12px',\r\n    fontWeight: 400,\r\n    fontFamily: 'Montserrat, sans-serif',\r\n  }, \r\n        },\r\n        grid: { show: false },\r\n        stroke: { show: false },\r\n        tooltip: {\r\n          shared: false,\r\n          intersect: true,\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n            const category = w.config.xaxis.categories[dataPointIndex];\r\n            const value = series[seriesIndex][dataPointIndex];\r\n            const color = w.globals.colors[seriesIndex];\r\n            return `\r\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\r\n                <strong>${category}:</strong> ${value}\r\n              </div>\r\n            `;\r\n          },\r\n        },\r\n        xaxis: {\r\n          categories: this.dataSource.categories,\r\n          labels: {\r\n            style: {\r\n              colors: '#ffffff',\r\n              fontSize: '11px',\r\n            },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            offsetX: 5,\r\n            style: { colors: '#ffffff' },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          offsetY: -10,\r\n          fontSize: '9px',\r\n          fontFamily: 'Montserrat-Regular, sans-serif',\r\n          markers: {\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: 10,\r\n            strokeWidth: 0,\r\n          },\r\n          itemMargin: {\r\n            horizontal: 5,\r\n            vertical: 15,\r\n          },\r\n          formatter: (seriesName, opts) => {\r\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\r\n          },\r\n        },\r\n        colors: this.dataSource.colors,\r\n        responsive: [\r\n          {\r\n            breakpoint: 1000,\r\n            options: {\r\n              plotOptions: {\r\n                bar: {\r\n                  horizontal: true,\r\n                },\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    calculateLabelPositions() {\r\n  this.$nextTick(() => {\r\n    const chartEl = this.$refs.chartContainer?.querySelector('.apexcharts-inner');\r\n    if (!chartEl) return;\r\n\r\n    const barRects = chartEl.querySelectorAll('.apexcharts-bar-series .apexcharts-bar-area');\r\n    const containerRect = this.$refs.chartContainer.getBoundingClientRect();\r\n\r\n    if (barRects.length === 0) return;\r\n\r\n    this.customLabels = this.dataSource.categories.map((category, index) => {\r\n      const barEl = barRects[index];\r\n      if (!barEl) return null;\r\n\r\n      const barBox = barEl.getBoundingClientRect();\r\n      const top = barBox.top - containerRect.top + barBox.height / 2 - 10;\r\n      const left = chartEl.getBoundingClientRect().width + 10;\r\n\r\n      const percentChange = this.dataSource.percentChanges.find(\r\n        (item) => item.year === category\r\n      );\r\n      const change = percentChange?.change || '0%';\r\n      const isNegative = change.startsWith('-');\r\n      const color = isNegative ? '#FF4D4F' : '#52C41A';\r\n\r\n      let total = 0;\r\n      this.dataSource.series.forEach((serie) => {\r\n        if (serie.data && typeof serie.data[index] === 'number') {\r\n          total += serie.data[index];\r\n        }\r\n      });\r\n\r\n      return {\r\n        top,\r\n        left,\r\n        change,\r\n        total: total.toFixed(2),\r\n        color,\r\n      };\r\n    }).filter(Boolean); \r\n  });\r\n},\r\n  },\r\n  watch: {\r\n    dataSource: {\r\n      handler() {\r\n        this.calculateLabelPositions();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  mounted() {\r\n    window.addEventListener('resize', this.calculateLabelPositions);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.calculateLabelPositions);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}