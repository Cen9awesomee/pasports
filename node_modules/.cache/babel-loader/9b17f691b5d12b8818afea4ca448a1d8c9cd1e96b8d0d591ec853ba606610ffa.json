{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ApexChart from 'vue-apexcharts';\nexport default {\n  name: 'ValChart',\n  components: {\n    ApexChart\n  },\n  props: {\n    width: {\n      type: [Number, String],\n      default: '90%'\n    },\n    dataSource: {\n      type: Object,\n      required: true,\n      default: () => ({\n        series: [],\n        categories: [],\n        colors: [],\n        customTotals: []\n      })\n    }\n  },\n  data() {\n    return {\n      horizontalTotal: true\n    };\n  },\n  computed: {\n    chartOptions() {\n      return {\n        chart: {\n          type: 'bar',\n          stacked: true,\n          height: '100%',\n          animations: {\n            enabled: true,\n            speed: 800\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        dataLabels: {\n          position: 'center',\n          enabled: true,\n          offsetX: -6,\n          style: {\n            fontSize: '11px',\n            fontWeight: 400,\n            fontFamily: 'Montserrat-Regular',\n            colors: ['#ffffff']\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            barHeight: '70%',\n            dataLabels: {\n              total: {\n                enabled: this.horizontalTotal,\n                offsetX: 30,\n                offsetY: -10,\n                style: {\n                  color: '#fff',\n                  fontSize: '11px',\n                  fontWeight: 'normal',\n                  fontFamily: 'Montserrat-Regular',\n                  whiteSpace: 'pre-line',\n                  lineHeight: '10px'\n                },\n                formatter: function (val, opts) {\n                  const index = opts.dataPointIndex;\n                  const customTotals = opts.w.config.customTotals || [];\n                  const totalEntry = customTotals[index];\n                  if (!totalEntry) return '';\n                  const [percent, total] = totalEntry;\n                  const color = percent.includes('-') ? '#f44336' : '#43A047';\n                  opts.w.config.plotOptions.bar.dataLabels.total.style.color = color;\n                  const maxLength = 20;\n                  const splitText = (text, maxLen) => {\n                    const result = [];\n                    let current = '';\n                    for (let i = 0; i < text.length; i++) {\n                      current += text[i];\n                      if (current.length >= maxLen) {\n                        result.push(current);\n                        current = '';\n                      }\n                    }\n                    if (current) result.push(current);\n                    return result;\n                  };\n                  const percentText = percent.toString();\n                  const totalText = total.toFixed(1).toString();\n                  const percentLines = splitText(percentText, maxLength);\n                  const totalLines = splitText(totalText, maxLength);\n                  const allLines = [...percentLines, ...totalLines];\n                  return allLines.join('\\n');\n                }\n              }\n            }\n          }\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            const category = w.config.xaxis.categories[dataPointIndex];\n            const value = series[seriesIndex][dataPointIndex];\n            const color = w.globals.colors[seriesIndex];\n            return `\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\n                <strong>${category}:</strong> ${value}\n              </div>\n            `;\n          }\n        },\n        xaxis: {\n          categories: this.dataSource.categories,\n          labels: {\n            style: {\n              colors: '#ffffff',\n              fontSize: '11px'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        yaxis: {\n          labels: {\n            offsetX: 5,\n            style: {\n              colors: '#ffffff'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        legend: {\n          position: 'bottom',\n          offsetY: -10,\n          fontSize: '9px',\n          fontFamily: 'Montserrat-Regular, sans-serif',\n          markers: {\n            width: 10,\n            height: 10,\n            borderRadius: 10,\n            strokeWidth: 0\n          },\n          itemMargin: {\n            horizontal: 5,\n            vertical: 15\n          },\n          formatter: (seriesName, opts) => {\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\n          }\n        },\n        colors: this.dataSource.colors,\n        responsive: [{\n          breakpoint: 1000,\n          options: {\n            plotOptions: {\n              bar: {\n                horizontal: true\n              }\n            }\n          }\n        }],\n        customTotals: this.dataSource.customTotals\n      };\n    }\n  }\n};","map":{"version":3,"names":["ApexChart","name","components","props","width","type","Number","String","default","dataSource","Object","required","series","categories","colors","customTotals","data","horizontalTotal","computed","chartOptions","chart","stacked","height","animations","enabled","speed","toolbar","show","dataLabels","position","offsetX","style","fontSize","fontWeight","fontFamily","plotOptions","bar","horizontal","barHeight","total","offsetY","color","whiteSpace","lineHeight","formatter","val","opts","index","dataPointIndex","w","config","totalEntry","percent","includes","maxLength","splitText","text","maxLen","result","current","i","length","push","percentText","toString","totalText","toFixed","percentLines","totalLines","allLines","join","grid","stroke","tooltip","shared","intersect","custom","seriesIndex","category","xaxis","value","globals","labels","axisBorder","axisTicks","yaxis","legend","markers","borderRadius","strokeWidth","itemMargin","vertical","seriesName","responsive","breakpoint","options"],"sources":["src/components/ValChart.vue"],"sourcesContent":["<template>\r\n  <ApexChart\r\n    type=\"bar\"\r\n    height=\"100%\"\r\n    :width=\"width\"\r\n    :options=\"chartOptions\"\r\n    :series=\"dataSource.series\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport ApexChart from 'vue-apexcharts';\r\n\r\nexport default {\r\n  name: 'ValChart',\r\n  components: { ApexChart },\r\n  props: {\r\n    width: {\r\n      type: [Number, String],\r\n      default: '90%',\r\n    },\r\n    dataSource: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => ({\r\n        series: [],\r\n        categories: [],\r\n        colors: [],\r\n        customTotals: [],\r\n      }),\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      horizontalTotal: true,\r\n    };\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      return {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          height: '100%',\r\n          animations: {\r\n            enabled: true,\r\n            speed: 800,\r\n          },\r\n          toolbar: { show: false },\r\n          \r\n        },\r\n        dataLabels: {\r\n          position: 'center',\r\n      enabled: true,\r\n  offsetX: -6,\r\n  style: {\r\n    fontSize: '11px',\r\n    fontWeight: 400,\r\n    fontFamily: 'Montserrat-Regular',\r\n    colors: ['#ffffff'],\r\n  },\r\n        },\r\n\r\n\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            barHeight: '70%',\r\n            dataLabels: {\r\n  total: {\r\n    enabled: this.horizontalTotal,\r\n    offsetX: 30,\r\n    offsetY: -10,\r\n    style: {\r\n      color: '#fff',\r\n      fontSize: '11px',\r\n      fontWeight: 'normal',\r\n      fontFamily: 'Montserrat-Regular',\r\n      whiteSpace: 'pre-line',\r\n      lineHeight: '10px',\r\n    },\r\n  formatter: function (val, opts) {\r\n          const index = opts.dataPointIndex;\r\n          const customTotals = opts.w.config.customTotals || [];\r\n          const totalEntry = customTotals[index];\r\n          if (!totalEntry) return '';\r\n          const [percent, total] = totalEntry;\r\n          const color = percent.includes('-') ? '#f44336' : '#43A047';\r\n          opts.w.config.plotOptions.bar.dataLabels.total.style.color = color;\r\n          const maxLength = 20;\r\n          const splitText = (text, maxLen) => {\r\n            const result = [];\r\n            let current = '';\r\n            for (let i = 0; i < text.length; i++) {\r\n              current += text[i];\r\n              if (current.length >= maxLen) {\r\n                result.push(current);\r\n                current = '';\r\n              }\r\n            }\r\n            if (current) result.push(current);\r\n            return result;\r\n          };\r\n          const percentText = percent.toString();\r\n          const totalText = total.toFixed(1).toString();\r\n          const percentLines = splitText(percentText, maxLength);\r\n          const totalLines = splitText(totalText, maxLength);\r\n          const allLines = [...percentLines, ...totalLines];\r\n          return allLines.join('\\n');\r\n        },\r\n           \r\n      },\r\n   \r\n    },\r\n          },\r\n        },\r\n        grid: { show: false },\r\n        stroke: { show: false },\r\n        tooltip: {\r\n          shared: false,\r\n          intersect: true,\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n            const category = w.config.xaxis.categories[dataPointIndex];\r\n            const value = series[seriesIndex][dataPointIndex];\r\n            const color = w.globals.colors[seriesIndex];\r\n            return `\r\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\r\n                <strong>${category}:</strong> ${value}\r\n              </div>\r\n            `;\r\n          },\r\n        },\r\n        xaxis: {\r\n          categories: this.dataSource.categories,\r\n          labels: {\r\n            style: {\r\n              colors: '#ffffff',\r\n              fontSize: '11px',\r\n            },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            offsetX: 5,\r\n            style: { colors: '#ffffff' },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          offsetY: -10,\r\n          fontSize: '9px',\r\n          fontFamily: 'Montserrat-Regular, sans-serif',\r\n          markers: {\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: 10,\r\n            strokeWidth: 0,\r\n          },\r\n          itemMargin: {\r\n            horizontal: 5,\r\n            vertical: 15,\r\n          },\r\n          formatter: (seriesName, opts) => {\r\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\r\n          },\r\n        },\r\n        colors: this.dataSource.colors,\r\n        responsive: [\r\n          {\r\n            breakpoint: 1000,\r\n            options: {\r\n              plotOptions: {\r\n                bar: { horizontal: true },\r\n              },\r\n            },\r\n          },\r\n        ],\r\n        customTotals: this.dataSource.customTotals,\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}