{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport mapSvg from '@/assets/map.svg';\nexport default {\n  name: 'MapComponent',\n  props: {\n    regionItems: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      svgContent: mapSvg,\n      selectedRegion: null,\n      tooltipVisible: false,\n      tooltipText: '',\n      tooltipX: 0,\n      tooltipY: 0,\n      defaultViewBox: '0 0 29252.3 16557.2',\n      currentViewBox: '0 0 29252.3 16557.2',\n      zoomLevel: 1\n    };\n  },\n  mounted() {\n    console.log('svgContent:', this.svgContent);\n    this.addEventListeners();\n    this.updateSvgText();\n  },\n  methods: {\n    addEventListeners() {\n      const paths = this.$el.querySelectorAll('.svg-map path');\n      paths.forEach(path => {\n        const regionId = this.getRegionIdFromClass(path); // Извлекаем ID из класса\n        const region = this.regionItems.find(r => r.id === regionId);\n        const regionName = region ? region.name : 'Неизвестный регион';\n        path.addEventListener('click', () => this.selectRegion(regionId));\n        path.addEventListener('mouseenter', event => this.showTooltip(regionName, event));\n        path.addEventListener('mouseleave', () => this.hideTooltip());\n      });\n      this.updateSvgViewBox();\n    },\n    getRegionIdFromClass(element) {\n      const classList = element.className.baseVal.split(' '); // Получаем классы SVG-элемента\n      const filClass = classList.find(cls => cls.startsWith('fil'));\n      return filClass ? filClass.replace('fil', '') : null; // Извлекаем число после \"fil\"\n    },\n    selectRegion(regionId) {\n      this.selectedRegion = regionId;\n      this.centerRegion(regionId);\n      this.updateSvgClasses();\n      this.$emit('region-selected', regionId);\n    },\n    resetToDefault() {\n      this.selectedRegion = null;\n      this.currentViewBox = this.defaultViewBox;\n      this.zoomLevel = 1;\n      this.updateSvgClasses();\n      this.updateSvgViewBox();\n      this.$emit('region-selected', null);\n    },\n    centerRegion(regionId) {\n      const svg = this.$el.querySelector('.svg-map');\n      const path = svg.querySelector(`.fil${regionId}`);\n      if (path) {\n        const bbox = path.getBBox();\n        const container = this.$el.querySelector('.map-container');\n        const containerWidth = container.clientWidth;\n        const containerHeight = container.clientHeight;\n        const zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8; // Адаптивный масштаб\n        const newWidth = bbox.width * zoomFactor;\n        const newHeight = bbox.height * zoomFactor;\n        const centerX = bbox.x + bbox.width / 2;\n        const centerY = bbox.y + bbox.height / 2;\n        const newX = centerX - newWidth / 2;\n        const newY = centerY - newHeight / 2;\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\n        this.zoomLevel = zoomFactor;\n        this.updateSvgViewBox();\n      }\n    },\n    updateSvgViewBox() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (svg) {\n        svg.setAttribute('viewBox', this.currentViewBox);\n      }\n    },\n    updateSvgClasses() {\n      const paths = this.$el.querySelectorAll('.svg-map path');\n      paths.forEach(path => {\n        const regionId = this.getRegionIdFromClass(path);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          path.classList.add('hidden');\n        } else {\n          path.classList.remove('hidden');\n        }\n      });\n      const texts = this.$el.querySelectorAll('.svg-map text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          text.classList.add('hidden');\n        } else {\n          text.classList.remove('hidden');\n        }\n      });\n    },\n    updateSvgText() {\n      const texts = this.$el.querySelectorAll('.svg-map text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        const region = this.regionItems.find(r => r.id === regionId);\n        if (region && region.percentage) {\n          text.textContent = `${region.percentage}%`;\n        }\n      });\n    },\n    showTooltip(text, event) {\n      this.tooltipText = text;\n      this.tooltipVisible = true;\n      this.tooltipX = event.clientX;\n      this.tooltipY = event.clientY;\n    },\n    hideTooltip() {\n      this.tooltipVisible = false;\n    }\n  },\n  watch: {\n    selectedRegion() {\n      this.updateSvgClasses();\n    },\n    regionItems: {\n      handler() {\n        this.updateSvgText();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["mapSvg","name","props","regionItems","type","Array","required","default","data","svgContent","selectedRegion","tooltipVisible","tooltipText","tooltipX","tooltipY","defaultViewBox","currentViewBox","zoomLevel","mounted","console","log","addEventListeners","updateSvgText","methods","paths","$el","querySelectorAll","forEach","path","regionId","getRegionIdFromClass","region","find","r","id","regionName","addEventListener","selectRegion","event","showTooltip","hideTooltip","updateSvgViewBox","element","classList","className","baseVal","split","filClass","cls","startsWith","replace","centerRegion","updateSvgClasses","$emit","resetToDefault","svg","querySelector","bbox","getBBox","container","containerWidth","clientWidth","containerHeight","clientHeight","zoomFactor","Math","min","width","height","newWidth","newHeight","centerX","x","centerY","y","newX","newY","setAttribute","add","remove","texts","text","percentage","textContent","clientX","clientY","watch","handler","deep"],"sources":["src/components/MapComponent.vue"],"sourcesContent":["<template>\r\n<div class=\"map-container\">\r\n    <div v-html=\"svgContent\" class=\"svg-wrapper\"></div>\r\n    <div v-if=\"tooltipVisible\" class=\"tooltip\" :style=\"{ left: tooltipX + 'px', top: tooltipY + 'px' }\">\r\n      {{ tooltipText }}\r\n    </div>\r\n    <button v-if=\"selectedRegion !== null\" class=\"reset-btn\" @click=\"resetToDefault\">\r\n      <i class=\"fa-solid fa-earth-americas\"></i>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mapSvg from '@/assets/map.svg';\r\nexport default {\r\n  name: 'MapComponent',\r\n  props: {\r\n    regionItems: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => [],\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      svgContent: mapSvg,\r\n      selectedRegion: null,\r\n      tooltipVisible: false,\r\n      tooltipText: '',\r\n      tooltipX: 0,\r\n      tooltipY: 0,\r\n      defaultViewBox: '0 0 29252.3 16557.2',\r\n      currentViewBox: '0 0 29252.3 16557.2',\r\n      zoomLevel: 1,\r\n    };\r\n  },\r\n  mounted() {\r\n    console.log('svgContent:', this.svgContent);\r\n    this.addEventListeners();\r\n    this.updateSvgText();\r\n  },\r\n  methods: {\r\n    addEventListeners() {\r\n      const paths = this.$el.querySelectorAll('.svg-map path');\r\n      paths.forEach((path) => {\r\n        const regionId = this.getRegionIdFromClass(path); // Извлекаем ID из класса\r\n        const region = this.regionItems.find((r) => r.id === regionId);\r\n        const regionName = region ? region.name : 'Неизвестный регион';\r\n        path.addEventListener('click', () => this.selectRegion(regionId));\r\n        path.addEventListener('mouseenter', (event) => this.showTooltip(regionName, event));\r\n        path.addEventListener('mouseleave', () => this.hideTooltip());\r\n      });\r\n      this.updateSvgViewBox();\r\n    },\r\n    getRegionIdFromClass(element) {\r\n      const classList = element.className.baseVal.split(' '); // Получаем классы SVG-элемента\r\n      const filClass = classList.find((cls) => cls.startsWith('fil'));\r\n      return filClass ? filClass.replace('fil', '') : null; // Извлекаем число после \"fil\"\r\n    },\r\n    selectRegion(regionId) {\r\n      this.selectedRegion = regionId;\r\n      this.centerRegion(regionId);\r\n      this.updateSvgClasses();\r\n      this.$emit('region-selected', regionId);\r\n    },\r\n    resetToDefault() {\r\n      this.selectedRegion = null;\r\n      this.currentViewBox = this.defaultViewBox;\r\n      this.zoomLevel = 1;\r\n      this.updateSvgClasses();\r\n      this.updateSvgViewBox();\r\n      this.$emit('region-selected', null);\r\n    },\r\n    centerRegion(regionId) {\r\n  const svg = this.$el.querySelector('.svg-map');\r\n  const path = svg.querySelector(`.fil${regionId}`);\r\n  if (path) {\r\n    const bbox = path.getBBox();\r\n    const container = this.$el.querySelector('.map-container');\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n    const zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8; // Адаптивный масштаб\r\n    const newWidth = bbox.width * zoomFactor;\r\n    const newHeight = bbox.height * zoomFactor;\r\n    const centerX = bbox.x + bbox.width / 2;\r\n    const centerY = bbox.y + bbox.height / 2;\r\n    const newX = centerX - newWidth / 2;\r\n    const newY = centerY - newHeight / 2;\r\n\r\n    this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\r\n    this.zoomLevel = zoomFactor;\r\n    this.updateSvgViewBox();\r\n  }\r\n},\r\n    updateSvgViewBox() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (svg) {\r\n        svg.setAttribute('viewBox', this.currentViewBox);\r\n      }\r\n    },\r\n    updateSvgClasses() {\r\n      const paths = this.$el.querySelectorAll('.svg-map path');\r\n      paths.forEach((path) => {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          path.classList.add('hidden');\r\n        } else {\r\n          path.classList.remove('hidden');\r\n        }\r\n      });\r\n\r\n      const texts = this.$el.querySelectorAll('.svg-map text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          text.classList.add('hidden');\r\n        } else {\r\n          text.classList.remove('hidden');\r\n        }\r\n      });\r\n    },\r\n    updateSvgText() {\r\n      const texts = this.$el.querySelectorAll('.svg-map text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        const region = this.regionItems.find((r) => r.id === regionId);\r\n        if (region && region.percentage) {\r\n          text.textContent = `${region.percentage}%`;\r\n        }\r\n      });\r\n    },\r\n    showTooltip(text, event) {\r\n      this.tooltipText = text;\r\n      this.tooltipVisible = true;\r\n      this.tooltipX = event.clientX;\r\n      this.tooltipY = event.clientY;\r\n    },\r\n    hideTooltip() {\r\n      this.tooltipVisible = false;\r\n    },\r\n  },\r\n  watch: {\r\n    selectedRegion() {\r\n      this.updateSvgClasses();\r\n    },\r\n    regionItems: {\r\n      handler() {\r\n        this.updateSvgText();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}