{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport PopulationChart from '../charts/PopulationChart.vue';\nimport RingCharts from '../charts/RingCharts.vue';\nimport HorizontalStackBars from '../charts/HorizontalStackBars.vue';\nexport default {\n  name: 'FirstSlide',\n  components: {\n    PopulationChart,\n    RingCharts,\n    HorizontalStackBars\n  },\n  data() {\n    return {\n      selectedRegionId: null,\n      tooltipHtml: '',\n      tooltipEvent: null,\n      horizontalChartData2: {\n        categories: ['Промышленность', 'Строительство', 'Торговля', 'Транспорт', 'Туризм', 'Другие'],\n        colors: ['#e69138'],\n        series: [{\n          name: '',\n          data: [200, 111, 100, 100, 25, 86]\n        }]\n      },\n      horizontalChartData1: {\n        categories: ['16-29 лет', 'Занятые', 'Наемные', 'Самозанятые', 'Безработные'],\n        colors: ['#45818e'],\n        series: [{\n          name: '',\n          data: [268, 406, 306, 100, 126]\n        }]\n      },\n      populationChartData: {\n        categories: ['Всего', 'Дети', 'Молодёжь', 'Взрослые', 'Пожилые'],\n        colors: ['#de4058', '#057fdc'],\n        series: [{\n          name: 'Женщины',\n          data: [-509, -10, -149, -220, -130]\n        }, {\n          name: 'Мужчины',\n          data: [500, 16, 119, 245, 120]\n        }]\n      },\n      ringChartData1: {\n        colors: ['#a7a7a7', '#e6e6e6'],\n        series: [6, 5],\n        categories: ['Умерло', 'Родилось']\n      },\n      ringChartData2: {\n        colors: ['#a7a7a7', '#e6e6e6'],\n        series: [11, 9],\n        categories: ['Выбыло', 'Прибыло']\n      }\n    };\n  },\n  methods: {\n    handleRegionSelect(regionId) {\n      this.selectedRegionId = regionId;\n    },\n    handleTooltipShow({\n      region,\n      event\n    }) {\n      const regionName = region.name;\n      const fertility2023 = region.fertility['2023'];\n      const fertility2024 = region.fertility['2024'];\n      const mortality2023 = region.mortality['2023'];\n      const mortality2024 = region.mortality['2024'];\n      let fertilityTrend = '';\n      let fertilityIconClass = '';\n      const fert2023 = parseFloat(fertility2023);\n      const fert2024 = parseFloat(fertility2024);\n      if (fert2024 < fert2023) {\n        fertilityTrend = '<i class=\"fas fa-caret-down\"></i>';\n        fertilityIconClass = 'fertility-icon';\n      } else {\n        fertilityTrend = '<i class=\"fas fa-caret-up\"></i>';\n        fertilityIconClass = 'mortality-icon';\n      }\n      let mortalityTrend = '';\n      let mortalityIconClass = '';\n      const mortal2023 = parseFloat(mortality2023);\n      const mortal2024 = parseFloat(mortality2024);\n      if (mortal2024 < mortal2023) {\n        mortalityTrend = '<i class=\"fas fa-caret-down\"></i>';\n        mortalityIconClass = 'mortality-icon';\n      } else {\n        mortalityTrend = '<i class=\"fas fa-caret-up\"></i>';\n        mortalityIconClass = 'fertility-icon';\n      }\n      const html = `\n        <div class=\"tooltip-content\">\n          <div class=\"tooltip-title\">${regionName}</div>\n          <div class=\"tooltip-section\">\n            <span class=\"tooltip-label\">Рождаемость</span><br>\n            <span class=\"tooltip-year\">2023г. - ${fertility2023}</span>\n            <div class=\"tooltip-year-with-icon\">\n              <span class=\"tooltip-year\">2024г. - ${fertility2024}</span>\n              <span class=\"tooltip-icon ${fertilityIconClass}\">${fertilityTrend}</span>\n            </div>\n          </div>\n          <div class=\"tooltip-section\">\n            <span class=\"tooltip-label\">Смертность</span><br>\n            <span class=\"tooltip-year\">2023г. - ${mortality2023}</span>\n            <div class=\"tooltip-year-with-icon\">\n              <span class=\"tooltip-year\">2024г. - ${mortality2024}</span>\n              <span class=\"tooltip-icon ${mortalityIconClass}\">${mortalityTrend}</span>\n            </div>\n          </div>\n        </div>\n      `;\n      this.tooltipHtml = String(html);\n      this.tooltipEvent = {\n        position: {\n          x: event.clientX,\n          y: event.clientY\n        }\n      };\n    },\n    customizePathColors() {\n      const styles = {};\n      this.regionItems.forEach(region => {\n        const regionId = String(region.id);\n        if (region.percentage) {\n          const percentage = parseFloat(region.percentage) || 0;\n          if (percentage >= 75) {\n            styles[regionId] = 'rgb(104, 159, 56)';\n          } else if (percentage >= 25) {\n            styles[regionId] = 'rgb(51, 105, 30)';\n          } else {\n            styles[regionId] = 'rgb(124, 179, 66)';\n          }\n        } else {\n          styles[regionId] = 'rgb(189, 189, 189)';\n        }\n      });\n      return styles;\n    },\n    customizePathTexts() {\n      const texts = {};\n      this.regionItems.forEach(region => {\n        const regionId = String(region.id);\n        texts[regionId] = region.percentage || '';\n      });\n      return texts;\n    },\n    getFertilityPercent(item) {\n      return parseFloat(item.fertility['2024']) / 15 * 100;\n    },\n    getMortalityPercent(item) {\n      return parseFloat(item.mortality['2024']) / 15 * 100;\n    },\n    getCountUpOptions(value) {\n      const numStr = value.toString();\n      const decimalIndex = numStr.indexOf('.');\n      const decimalPlaces = decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n      return {\n        separator: ' ',\n        duration: 2,\n        useEasing: true,\n        decimalPlaces: decimalPlaces,\n        decimal: '.'\n      };\n    },\n    customSort(items, sortBy, sortDesc) {\n      if (!sortBy || !sortBy.length) return items;\n      const key = sortBy[0];\n      const desc = sortDesc[0];\n      return items.slice().sort((a, b) => {\n        let valA = a[key];\n        let valB = b[key];\n        if (typeof valA === 'object' && valA !== null) {\n          valA = parseFloat(valA['2024']) || 0;\n        }\n        if (typeof valB === 'object' && valB !== null) {\n          valB = parseFloat(valB['2024']) || 0;\n        }\n        if (typeof valA === 'string' && typeof valB === 'string') {\n          valA = valA.toLowerCase();\n          valB = valB.toLowerCase();\n        }\n        if (valA < valB) return desc ? 1 : -1;\n        if (valA > valB) return desc ? -1 : 1;\n        return 0;\n      });\n    }\n  },\n  computed: {\n    selectedRegion() {\n      return this.regionItems.find(region => String(region.id) === String(this.selectedRegionId || '14')) || null;\n    },\n    roadChartData() {\n      const {\n        categories,\n        colors,\n        years,\n        dataKeys\n      } = this.roadchartConfig;\n      const region = this.selectedRegion;\n      const series = years.map(year => ({\n        name: year,\n        data: dataKeys.map(key => {\n          if (!region) return 0;\n          const value = region.chartData[key]?.[year];\n          return parseFloat(value) || 0;\n        })\n      }));\n      return {\n        categories,\n        colors,\n        series\n      };\n    }\n  }\n};","map":{"version":3,"names":["PopulationChart","RingCharts","HorizontalStackBars","name","components","data","selectedRegionId","tooltipHtml","tooltipEvent","horizontalChartData2","categories","colors","series","horizontalChartData1","populationChartData","ringChartData1","ringChartData2","methods","handleRegionSelect","regionId","handleTooltipShow","region","event","regionName","fertility2023","fertility","fertility2024","mortality2023","mortality","mortality2024","fertilityTrend","fertilityIconClass","fert2023","parseFloat","fert2024","mortalityTrend","mortalityIconClass","mortal2023","mortal2024","html","String","position","x","clientX","y","clientY","customizePathColors","styles","regionItems","forEach","id","percentage","customizePathTexts","texts","getFertilityPercent","item","getMortalityPercent","getCountUpOptions","value","numStr","toString","decimalIndex","indexOf","decimalPlaces","length","separator","duration","useEasing","decimal","customSort","items","sortBy","sortDesc","key","desc","slice","sort","a","b","valA","valB","toLowerCase","computed","selectedRegion","find","roadChartData","years","dataKeys","roadchartConfig","map","year","chartData"],"sources":["src/components/slides/FirstSlide.vue"],"sourcesContent":["<template>\r\n  <div class=\"grid-container first-page\">\r\n    <v-card class=\"chart-card chart-card-first\">\r\n    <!-- Заголовок -->\r\n    <v-card-title class=\"card-header\">\r\n      Общие сведения\r\n    </v-card-title>\r\n\r\n    <!-- Контент -->\r\n    <v-card-text class=\"card-content\">\r\n      <v-row class=\"general-info\" no-gutters>\r\n        \r\n        <!-- Левая колонка -->\r\n        <v-col cols=\"8\" class=\"general-info-left\">\r\n          <v-row no-gutters>\r\n            <v-col cols=\"5\">\r\n              <p><strong>Админ. центр</strong></p>\r\n              <p><strong>Аким</strong></p>\r\n            </v-col>\r\n            <v-col cols=\"8\">\r\n              <p>с. Заградовка</p>\r\n              <p class=\"akim-name\">Тулегенов Берик Тлегенович</p>\r\n              <p class=\"akim-date\">с 14.02.2008 г.</p>\r\n            </v-col>\r\n          </v-row>\r\n\r\n          <!-- Фото -->\r\n          <v-row no-gutters>\r\n            <v-col cols=\"5\"></v-col>\r\n            <v-col cols=\"7\">\r\n              <v-img\r\n                src=\"path/to/photo.jpg\"\r\n                class=\"akim-photo\"\r\n                max-width=\"90\"\r\n                max-height=\"90\"\r\n                contain\r\n              ></v-img>\r\n            </v-col>\r\n          </v-row>\r\n\r\n          <!-- Координаты и площадь -->\r\n          <v-row no-gutters>\r\n            <v-col cols=\"5\">\r\n              <p><strong>Координаты</strong></p>\r\n              <p><strong>Площадь</strong></p>\r\n            </v-col>\r\n            <v-col cols=\"7\">\r\n              <p>53°50'46\" с.ш. 68°36'36\" в.д.</p>\r\n              <p>305,2 га</p>\r\n            </v-col>\r\n          </v-row>\r\n        </v-col>\r\n\r\n        <!-- Правая колонка -->\r\n        <v-col cols=\"4\" class=\"general-info-right\">\r\n          <v-row no-gutters>\r\n            <v-col cols=\"8\">\r\n              <p><strong>СНП</strong></p>\r\n              <p><strong>Население, чел.</strong></p>\r\n              <p>с.Заградовка</p>\r\n              <p>с.Тонкошуровка</p>\r\n              <p>с.Горное</p>\r\n              <p>с.Жамбыл</p>\r\n            </v-col>\r\n            <v-col cols=\"3\" class=\"text-right\">\r\n              <p>5</p>\r\n              \r\n              <p>840</p>\r\n              <p>98</p>\r\n              <p>37</p>\r\n              <p>34</p>\r\n            </v-col>\r\n          </v-row>\r\n        </v-col>\r\n\r\n      </v-row>\r\n    </v-card-text>\r\n  </v-card>\r\n    <div class=\"chart-card chart-card-second\">\r\n      <div class=\"card-header\">Общая численность населения, чел.</div>\r\n      <div class=\"card-content\">\r\n        <population-chart height=\"100%\" :data-source=\"populationChartData\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"chart-card chart-card-third\">\r\n      <div class=\"card-header\">Движение населения, чел.</div>\r\n      <div class=\"card-content\">\r\n        <div class=\"ring-charts\">\r\n          <div class=\"ring-chart-container\">\r\n        <ring-charts height=\"100%\" :data-source=\"ringChartData1\" />\r\n        </div>\r\n        <div class=\"chart-divider\">\r\n      <i class=\"fa-solid fa-caret-down\"></i>\r\n      <span class=\"divider-text\">-3</span>\r\n    </div>\r\n    <div class=\"ring-chart-container\">\r\n    <ring-charts height=\"100%\" :data-source=\"ringChartData2\" />\r\n    </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"chart-card chart-card-four\">\r\n      <div class=\"card-header\">Трудоспособность, чел.</div>\r\n      <div class=\"card-content\">\r\n        <horizontal-stack-bars height=\"100%\" :data-source=\"horizontalChartData1\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"chart-card chart-card-four-2\">\r\n      <div class=\"card-header\">Занятость, чел.</div>\r\n      <div class=\"card-content\">\r\n        <horizontal-stack-bars height=\"100%\" :data-source=\"horizontalChartData2\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport PopulationChart from '../charts/PopulationChart.vue';\r\nimport RingCharts from '../charts/RingCharts.vue';\r\nimport HorizontalStackBars from '../charts/HorizontalStackBars.vue';\r\n\r\nexport default {\r\n  name: 'FirstSlide',\r\n  components: {\r\n    PopulationChart,\r\n    RingCharts,\r\n    HorizontalStackBars,\r\n  },\r\n  data() {\r\n    return {\r\n      selectedRegionId: null,\r\n      tooltipHtml: '',\r\n      tooltipEvent: null,\r\n\r\n      horizontalChartData2: {\r\n        categories: ['Промышленность', 'Строительство', 'Торговля', 'Транспорт', 'Туризм', 'Другие'],\r\n        colors: ['#e69138'],\r\n        series: [\r\n          {\r\n            name: '',\r\n            data: [200, 111, 100, 100, 25, 86],\r\n          },\r\n        ],\r\n      },\r\n      horizontalChartData1: {\r\n        categories: ['16-29 лет', 'Занятые', 'Наемные', 'Самозанятые', 'Безработные'],\r\n        colors: ['#45818e'],\r\n        series: [\r\n          {\r\n            name: '',\r\n            data: [268, 406, 306, 100, 126],\r\n          },\r\n        ],\r\n      },\r\n      populationChartData: {\r\n        categories: ['Всего', 'Дети', 'Молодёжь', 'Взрослые', 'Пожилые'],\r\n        colors: ['#de4058', '#057fdc'],\r\n        series: [\r\n          {\r\n            name: 'Женщины',\r\n            data: [-509, -10, -149, -220, -130],\r\n          },\r\n          {\r\n            name: 'Мужчины',\r\n            data: [500, 16, 119, 245, 120],\r\n          },\r\n        ],\r\n      },\r\n      ringChartData1: {\r\n  colors: ['#a7a7a7', '#e6e6e6'],\r\n  series: [6, 5], \r\n  categories: ['Умерло', 'Родилось'], \r\n},\r\n      ringChartData2: {\r\n  colors: ['#a7a7a7', '#e6e6e6'],\r\n  series: [11, 9], \r\n  categories: ['Выбыло', 'Прибыло'], \r\n},\r\n      \r\n      };\r\n  },\r\n  methods: {\r\n    handleRegionSelect(regionId) {\r\n      this.selectedRegionId = regionId;\r\n    },\r\n    handleTooltipShow({ region, event }) {\r\n      const regionName = region.name;\r\n      const fertility2023 = region.fertility['2023'];\r\n      const fertility2024 = region.fertility['2024'];\r\n      const mortality2023 = region.mortality['2023'];\r\n      const mortality2024 = region.mortality['2024'];\r\n\r\n      let fertilityTrend = '';\r\n      let fertilityIconClass = '';\r\n      const fert2023 = parseFloat(fertility2023);\r\n      const fert2024 = parseFloat(fertility2024);\r\n      if (fert2024 < fert2023) {\r\n        fertilityTrend = '<i class=\"fas fa-caret-down\"></i>';\r\n        fertilityIconClass = 'fertility-icon';\r\n      } else {\r\n        fertilityTrend = '<i class=\"fas fa-caret-up\"></i>';\r\n        fertilityIconClass = 'mortality-icon';\r\n      }\r\n\r\n      let mortalityTrend = '';\r\n      let mortalityIconClass = '';\r\n      const mortal2023 = parseFloat(mortality2023);\r\n      const mortal2024 = parseFloat(mortality2024);\r\n      if (mortal2024 < mortal2023) {\r\n        mortalityTrend = '<i class=\"fas fa-caret-down\"></i>';\r\n        mortalityIconClass = 'mortality-icon';\r\n      } else {\r\n        mortalityTrend = '<i class=\"fas fa-caret-up\"></i>';\r\n        mortalityIconClass = 'fertility-icon';\r\n      }\r\n\r\n      const html = `\r\n        <div class=\"tooltip-content\">\r\n          <div class=\"tooltip-title\">${regionName}</div>\r\n          <div class=\"tooltip-section\">\r\n            <span class=\"tooltip-label\">Рождаемость</span><br>\r\n            <span class=\"tooltip-year\">2023г. - ${fertility2023}</span>\r\n            <div class=\"tooltip-year-with-icon\">\r\n              <span class=\"tooltip-year\">2024г. - ${fertility2024}</span>\r\n              <span class=\"tooltip-icon ${fertilityIconClass}\">${fertilityTrend}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tooltip-section\">\r\n            <span class=\"tooltip-label\">Смертность</span><br>\r\n            <span class=\"tooltip-year\">2023г. - ${mortality2023}</span>\r\n            <div class=\"tooltip-year-with-icon\">\r\n              <span class=\"tooltip-year\">2024г. - ${mortality2024}</span>\r\n              <span class=\"tooltip-icon ${mortalityIconClass}\">${mortalityTrend}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n\r\n      this.tooltipHtml = String(html);\r\n      this.tooltipEvent = {\r\n        position: {\r\n          x: event.clientX,\r\n          y: event.clientY,\r\n        },\r\n      };\r\n    },\r\n    customizePathColors() {\r\n      const styles = {};\r\n      this.regionItems.forEach((region) => {\r\n        const regionId = String(region.id);\r\n        if (region.percentage) {\r\n          const percentage = parseFloat(region.percentage) || 0;\r\n          if (percentage >= 75) {\r\n            styles[regionId] = 'rgb(104, 159, 56)';\r\n          } else if (percentage >= 25) {\r\n            styles[regionId] = 'rgb(51, 105, 30)';\r\n          } else {\r\n            styles[regionId] = 'rgb(124, 179, 66)';\r\n          }\r\n        } else {\r\n          styles[regionId] = 'rgb(189, 189, 189)';\r\n        }\r\n      });\r\n      return styles;\r\n    },\r\n    customizePathTexts() {\r\n      const texts = {};\r\n      this.regionItems.forEach((region) => {\r\n        const regionId = String(region.id);\r\n        texts[regionId] = region.percentage || '';\r\n      });\r\n      return texts;\r\n    },\r\n    getFertilityPercent(item) {\r\n      return (parseFloat(item.fertility['2024']) / 15) * 100;\r\n    },\r\n    getMortalityPercent(item) {\r\n      return (parseFloat(item.mortality['2024']) / 15) * 100;\r\n    },\r\n    getCountUpOptions(value) {\r\n      const numStr = value.toString();\r\n      const decimalIndex = numStr.indexOf('.');\r\n      const decimalPlaces = decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\r\n      return {\r\n        separator: ' ',\r\n        duration: 2,\r\n        useEasing: true,\r\n        decimalPlaces: decimalPlaces,\r\n        decimal: '.',\r\n      };\r\n    },\r\n    customSort(items, sortBy, sortDesc) {\r\n      if (!sortBy || !sortBy.length) return items;\r\n      const key = sortBy[0];\r\n      const desc = sortDesc[0];\r\n      return items.slice().sort((a, b) => {\r\n        let valA = a[key];\r\n        let valB = b[key];\r\n        if (typeof valA === 'object' && valA !== null) {\r\n          valA = parseFloat(valA['2024']) || 0;\r\n        }\r\n        if (typeof valB === 'object' && valB !== null) {\r\n          valB = parseFloat(valB['2024']) || 0;\r\n        }\r\n        if (typeof valA === 'string' && typeof valB === 'string') {\r\n          valA = valA.toLowerCase();\r\n          valB = valB.toLowerCase();\r\n        }\r\n        if (valA < valB) return desc ? 1 : -1;\r\n        if (valA > valB) return desc ? -1 : 1;\r\n        return 0;\r\n      });\r\n    },\r\n    \r\n  },\r\n  computed: {\r\n    selectedRegion() {\r\n      return this.regionItems.find(\r\n        (region) => String(region.id) === String(this.selectedRegionId || '14')\r\n      ) || null;\r\n    },\r\n    roadChartData() {\r\n      const { categories, colors, years, dataKeys } = this.roadchartConfig;\r\n      const region = this.selectedRegion;\r\n      const series = years.map(year => ({\r\n        name: year,\r\n        data: dataKeys.map(key => {\r\n          if (!region) return 0;\r\n          const value = region.chartData[key]?.[year];\r\n          return parseFloat(value) || 0;\r\n        }),\r\n      }));\r\n\r\n      return {\r\n        categories,\r\n        colors,\r\n        series,\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}