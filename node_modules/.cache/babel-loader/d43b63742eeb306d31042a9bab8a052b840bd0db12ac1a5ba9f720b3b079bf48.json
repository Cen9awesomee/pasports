{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport ApexChart from 'vue-apexcharts';\nexport default {\n  name: 'ValChart',\n  components: {\n    ApexChart\n  },\n  props: {\n    height: {\n      type: [Number, String],\n      default: 250\n    },\n    width: {\n      type: [Number, String],\n      default: '95%'\n    },\n    dataSource: {\n      type: Object,\n      required: true,\n      default: () => ({\n        series: [],\n        categories: [],\n        colors: [],\n        percentChanges: []\n      })\n    }\n  },\n  data() {\n    return {\n      customLabels: []\n    };\n  },\n  computed: {\n    chartOptions() {\n      return {\n        chart: {\n          type: 'bar',\n          stacked: true,\n          height: this.height,\n          animations: {\n            enabled: true,\n            speed: 800\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            barHeight: '70%',\n            dataLabels: {\n              position: 'center'\n            }\n          }\n        },\n        dataLabels: {\n          enabled: true,\n          style: {\n            fontSize: '11px',\n            fontWeight: 400,\n            fontFamily: 'Montserrat-Regular'\n          }\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          show: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            const category = w.config.xaxis.categories[dataPointIndex];\n            const value = series[seriesIndex][dataPointIndex];\n            const color = w.globals.colors[seriesIndex];\n            return `\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\n                <strong>${category}:</strong> ${value}\n              </div>\n            `;\n          }\n        },\n        xaxis: {\n          categories: this.dataSource.categories,\n          labels: {\n            style: {\n              colors: '#ffffff',\n              fontSize: '11px'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        yaxis: {\n          labels: {\n            offsetX: 5,\n            style: {\n              colors: '#ffffff'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#4b3f3f'\n          },\n          axisTicks: {\n            show: true,\n            color: '#4b3f3f'\n          }\n        },\n        legend: {\n          position: 'bottom',\n          offsetY: -10,\n          fontSize: '9px',\n          fontFamily: 'Montserrat-Regular, sans-serif',\n          markers: {\n            width: 10,\n            height: 10,\n            borderRadius: 10,\n            strokeWidth: 0\n          },\n          itemMargin: {\n            horizontal: 5,\n            vertical: 15\n          },\n          formatter: (seriesName, opts) => {\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\n          }\n        },\n        colors: this.dataSource.colors,\n        percentChange: this.dataSource.percentChanges,\n        responsive: [{\n          breakpoint: 1000,\n          options: {\n            plotOptions: {\n              bar: {\n                horizontal: true\n              }\n            }\n          }\n        }]\n      };\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.calculateLabelPositions();\n      window.addEventListener('resize', this.calculateLabelPositions);\n      const chartEl = this.$refs.chartContainer?.querySelector('.apexcharts-inner');\n      if (chartEl) {\n        this.mutationObserver = new MutationObserver(() => {\n          this.calculateLabelPositions();\n        });\n        this.mutationObserver.observe(chartEl, {\n          childList: true,\n          subtree: true,\n          attributes: true\n        });\n      }\n    });\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.calculateLabelPositions);\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n  },\n  watch: {\n    dataSource: {\n      handler() {\n        this.$nextTick(() => {\n          this.calculateLabelPositions();\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n    calculateLabelPositions() {\n      this.$nextTick(() => {\n        const chartEl = this.$refs.chartContainer?.querySelector('.apexcharts-inner');\n        if (!chartEl) return;\n        const yLabels = chartEl.querySelectorAll('.apexcharts-yaxis-texts-g text');\n        const barGroups = chartEl.querySelectorAll('.apexcharts-bar-series');\n        const containerRect = this.$refs.chartContainer.getBoundingClientRect();\n        if (yLabels.length === 0 || barGroups.length === 0) return;\n        this.customLabels = this.dataSource.categories.map((category, index) => {\n          const labelEl = yLabels[index];\n          const labelBox = labelEl?.getBoundingClientRect();\n          const top = labelBox ? labelBox.top - containerRect.top - 10 : 0;\n          let maxRight = 0;\n          barGroups.forEach(group => {\n            const bars = group.querySelectorAll('.apexcharts-bar-area');\n            if (bars[index]) {\n              const barRect = bars[index].getBoundingClientRect();\n              maxRight = Math.max(maxRight, barRect.right);\n            }\n          });\n          const left = maxRight ? maxRight - containerRect.left + 10 : 0;\n          let total = 0;\n          this.dataSource.series.forEach(serie => {\n            if (serie.data && typeof serie.data[index] === 'number') {\n              total += serie.data[index];\n            }\n          });\n          const percentChange = this.dataSource.percentChanges?.find(item => item.year === category);\n          const change = percentChange?.change || '0%';\n          const color = change.startsWith('-') ? '#FF4D4F' : '#52C41A';\n          return {\n            top,\n            left,\n            change,\n            total: total.toFixed(2),\n            color\n          };\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["ApexChart","name","components","props","height","type","Number","String","default","width","dataSource","Object","required","series","categories","colors","percentChanges","data","customLabels","computed","chartOptions","chart","stacked","animations","enabled","speed","toolbar","show","plotOptions","bar","horizontal","barHeight","dataLabels","position","style","fontSize","fontWeight","fontFamily","grid","stroke","tooltip","shared","intersect","custom","seriesIndex","dataPointIndex","w","category","config","xaxis","value","color","globals","labels","axisBorder","axisTicks","yaxis","offsetX","legend","offsetY","markers","borderRadius","strokeWidth","itemMargin","vertical","formatter","seriesName","opts","percentChange","responsive","breakpoint","options","mounted","$nextTick","calculateLabelPositions","window","addEventListener","chartEl","$refs","chartContainer","querySelector","mutationObserver","MutationObserver","observe","childList","subtree","attributes","beforeDestroy","removeEventListener","disconnect","watch","handler","deep","methods","yLabels","querySelectorAll","barGroups","containerRect","getBoundingClientRect","length","map","index","labelEl","labelBox","top","maxRight","forEach","group","bars","barRect","Math","max","right","left","total","serie","find","item","year","change","startsWith","toFixed"],"sources":["src/components/ValChart.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chartContainer\" :style=\"{ position: 'relative', height: height + 'px' }\">\r\n    <ApexChart\r\n      type=\"bar\"\r\n      :height=\"height\"\r\n      :width=\"width\"\r\n      :options=\"chartOptions\"\r\n      :series=\"dataSource.series\"\r\n    />\r\n   \r\n    <div\r\n      v-for=\"(label, index) in customLabels\"\r\n      :key=\"index\"\r\n      :style=\"{\r\n        position: 'absolute',\r\n        top: label.top + 'px',\r\n        left: label.left + 'px',\r\n        color: label.color,\r\n        fontSize: '11px',\r\n        fontWeight: '500',\r\n        fontFamily: 'Montserrat-Regular, sans-serif',\r\n        lineHeight: '1.2',\r\n        pointerEvents: 'none',\r\n      }\"\r\n    >\r\n      <div>{{ label.change }}</div>\r\n      <div>{{ label.total }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport ApexChart from 'vue-apexcharts';\r\n\r\nexport default {\r\n  name: 'ValChart',\r\n  components: { ApexChart },\r\n  props: {\r\n    height: {\r\n      type: [Number, String],\r\n      default: 250,\r\n    },\r\n    width: {\r\n      type: [Number, String],\r\n      default: '95%',\r\n    },\r\n    dataSource: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => ({\r\n        series: [],\r\n        categories: [],\r\n        colors: [],\r\n        percentChanges: [],\r\n      }),\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      customLabels: [],\r\n    };\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      \r\n      return {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          height: this.height,\r\n          animations: {\r\n            enabled: true,\r\n            speed: 800,\r\n          },\r\n          toolbar: { show: false },\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            barHeight: '70%',\r\n            \r\n            dataLabels: {\r\n              position: 'center',\r\n              \r\n              \r\n            },\r\n          },\r\n        },\r\n        dataLabels: {\r\n  enabled: true,\r\n  style: {\r\n    fontSize: '11px',\r\n    fontWeight: 400,\r\n    fontFamily: 'Montserrat-Regular',\r\n  },\r\n        },\r\n        grid: { show: false },\r\n        stroke: { show: false },\r\n        tooltip: {\r\n          shared: false,\r\n          intersect: true,\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n            const category = w.config.xaxis.categories[dataPointIndex];\r\n            const value = series[seriesIndex][dataPointIndex];\r\n            const color = w.globals.colors[seriesIndex];\r\n            return `\r\n              <div style=\"padding: 5px; background: ${color}; color: #fff; font-size: 10px;\">\r\n                <strong>${category}:</strong> ${value}\r\n              </div>\r\n            `;\r\n          },\r\n        },\r\n        xaxis: {\r\n          categories: this.dataSource.categories,\r\n          labels: {\r\n            style: {\r\n              colors: '#ffffff',\r\n              fontSize: '11px',\r\n            },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            offsetX: 5,\r\n            style: { colors: '#ffffff' },\r\n          },\r\n          axisBorder: { show: true, color: '#4b3f3f' },\r\n          axisTicks: { show: true, color: '#4b3f3f' },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          offsetY: -10,\r\n          fontSize: '9px',\r\n          fontFamily: 'Montserrat-Regular, sans-serif',\r\n          markers: {\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: 10,\r\n            strokeWidth: 0,\r\n          },\r\n          itemMargin: {\r\n            horizontal: 5,\r\n            vertical: 15,\r\n          },\r\n          formatter: (seriesName, opts) => {\r\n            return `<span style=\"color: ${opts.w.globals.colors[opts.seriesIndex]}\">${seriesName}</span>`;\r\n          },\r\n        },\r\n        colors: this.dataSource.colors,\r\n        percentChange: this.dataSource.percentChanges,\r\n        responsive: [\r\n          {\r\n            breakpoint: 1000,\r\n            options: {\r\n              plotOptions: {\r\n                bar: {\r\n                  horizontal: true,\r\n                },\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n  mounted() {\r\n  this.$nextTick(() => {\r\n    this.calculateLabelPositions();\r\n    window.addEventListener('resize', this.calculateLabelPositions);\r\n    const chartEl = this.$refs.chartContainer?.querySelector('.apexcharts-inner');\r\n    if (chartEl) {\r\n      this.mutationObserver = new MutationObserver(() => {\r\n        this.calculateLabelPositions();\r\n      });\r\n      this.mutationObserver.observe(chartEl, {\r\n        childList: true,\r\n        subtree: true,\r\n        attributes: true,\r\n      });\r\n    }\r\n  });\r\n},\r\nbeforeDestroy() {\r\n  window.removeEventListener('resize', this.calculateLabelPositions);\r\n  if (this.mutationObserver) {\r\n    this.mutationObserver.disconnect();\r\n  }\r\n},\r\n  watch: {\r\n    dataSource: {\r\n      handler() {\r\n        this.$nextTick(() => {\r\n          this.calculateLabelPositions();\r\n        });\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateLabelPositions() {\r\n      this.$nextTick(() => {\r\n        const chartEl = this.$refs.chartContainer?.querySelector('.apexcharts-inner');\r\n        if (!chartEl) return;\r\n\r\n        const yLabels = chartEl.querySelectorAll('.apexcharts-yaxis-texts-g text');\r\n        const barGroups = chartEl.querySelectorAll('.apexcharts-bar-series');\r\n        const containerRect = this.$refs.chartContainer.getBoundingClientRect();\r\n\r\n        if (yLabels.length === 0 || barGroups.length === 0) return;\r\n\r\n        this.customLabels = this.dataSource.categories.map((category, index) => {\r\n          const labelEl = yLabels[index];\r\n          const labelBox = labelEl?.getBoundingClientRect();\r\n          const top = labelBox ? labelBox.top - containerRect.top - 10 : 0;\r\n\r\n          let maxRight = 0;\r\n          barGroups.forEach((group) => {\r\n            const bars = group.querySelectorAll('.apexcharts-bar-area');\r\n            if (bars[index]) {\r\n              const barRect = bars[index].getBoundingClientRect();\r\n              maxRight = Math.max(maxRight, barRect.right);\r\n            }\r\n          });\r\n\r\n          const left = maxRight ? maxRight - containerRect.left + 10 : 0;\r\n\r\n          let total = 0;\r\n          this.dataSource.series.forEach((serie) => {\r\n            if (serie.data && typeof serie.data[index] === 'number') {\r\n              total += serie.data[index];\r\n            }\r\n          });\r\n\r\n          const percentChange = this.dataSource.percentChanges?.find(\r\n            (item) => item.year === category\r\n          );\r\n          const change = percentChange?.change || '0%';\r\n          const color = change.startsWith('-') ? '#FF4D4F' : '#52C41A';\r\n\r\n          \r\n\r\n          return {\r\n            top,\r\n            left,\r\n            change,\r\n            total: total.toFixed(2),\r\n            color,\r\n          };\r\n        });\r\n      });\r\n    },\r\n  },\r\n  \r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}