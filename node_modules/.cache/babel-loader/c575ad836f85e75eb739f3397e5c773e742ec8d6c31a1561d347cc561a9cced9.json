{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport MapSvg from '@/assets/map.svg';\nexport default {\n  components: {\n    MapSvg\n  },\n  props: {\n    regionItems: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    regionStyles: {\n      type: Object,\n      default: () => ({})\n    },\n    regionTexts: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      selectedRegion: null,\n      tooltipVisible: false,\n      tooltipText: '',\n      tooltipX: 0,\n      tooltipY: 0,\n      defaultViewBox: '0 0 29252.3 16557.2',\n      currentViewBox: '0 0 29252.3 16557.2',\n      zoomLevel: 1\n    };\n  },\n  mounted() {\n    this.applyStylesAndTexts();\n    this.updateSvgClasses();\n    this.addEventListeners();\n  },\n  methods: {\n    addEventListeners() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) return;\n      const paths = svg.querySelectorAll('path');\n      paths.forEach(path => {\n        path.addEventListener('click', () => {\n          const regionId = this.getRegionIdFromClass(path);\n          if (regionId) {\n            this.selectRegion(regionId);\n          }\n        });\n        path.addEventListener('mouseenter', event => {\n          const regionId = this.getRegionIdFromClass(path);\n          const region = this.regionItems.find(r => String(r.id) === regionId);\n          const regionName = region ? region.name : 'Неизвестный регион';\n          console.log('MouseEnter:', {\n            regionId,\n            region,\n            regionName\n          });\n          this.showTooltip(regionName, event);\n        });\n        path.addEventListener('mouseleave', () => {\n          this.hideTooltip();\n        });\n      });\n    },\n    handleSvgClick(event) {\n      const path = event.target.closest('path');\n      if (path) {\n        const regionId = this.getRegionIdFromClass(path);\n        if (regionId) {\n          this.selectRegion(regionId);\n        }\n      }\n    },\n    handleSvgMouseEnter(event) {\n      const path = event.target.closest('path');\n      if (path) {\n        this.showTooltip(event);\n      }\n    },\n    getRegionIdFromClass(element) {\n      const classList = element.classList;\n      const filClass = Array.from(classList).find(cls => cls.startsWith('fil'));\n      let regionId = filClass ? filClass.replace('fil', '') : null;\n      if (classList.contains('fnt-city') && regionId) {\n        regionId = `${regionId}-city`;\n      }\n      return regionId;\n    },\n    applyStylesAndTexts() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) {\n        console.warn('SVG element not found');\n        return;\n      }\n\n      // Применение стилей к путям\n      const paths = svg.querySelectorAll('path');\n      paths.forEach(path => {\n        const regionId = this.getRegionIdFromClass(path);\n        if (regionId && this.regionStyles[regionId]) {\n          path.style.fill = this.regionStyles[regionId];\n        } else {\n          path.style.fill = '#ccc';\n        }\n      });\n\n      // Применение текста\n      const texts = svg.querySelectorAll('text');\n      texts.forEach(text => {\n        const textClasses = text.classList;\n        console.log('Text classes:', textClasses); // Отладка\n\n        // Проверяем, есть ли класс filN (например, fil7)\n        const filClass = Array.from(textClasses).find(cls => cls.startsWith('fil'));\n        if (filClass) {\n          const regionId = filClass.replace('fil', '');\n          let textData = this.regionItems.filter(item => String(item.id) === regionId);\n          console.log('Text data for regionId', regionId, ':', textData); // Отладка\n\n          if (textData.length === 1) {\n            let value = textData[0]?.percentage || 'N/A';\n            value = value.replace(/\\u200B/g, ''); // Очистка от \\u200B\n            text.textContent = value;\n          } else {\n            text.textContent = 'N/A'; // Для отладки\n          }\n        }\n\n        // Особая обработка для fnt-city\n        if (textClasses.contains('fnt-city')) {\n          const regionId = this.getRegionIdFromClass(text); // Например, \"1-city\"\n          let textFntCityData = this.regionItems.filter(item => String(item.id) === regionId);\n          console.log('Text fnt-city data for regionId', regionId, ':', textFntCityData); // Отладка\n\n          if (textFntCityData.length === 1) {\n            let value = textFntCityData[0]?.percentage || 'N/A';\n            value = value.replace(/\\u200B/g, ''); // Очистка от \\u200B\n            text.textContent = `№ ${textFntCityData[0]?.name} - ${value}`;\n          } else {\n            text.textContent = 'N/A'; // Для отладки\n          }\n        }\n      });\n    },\n    selectRegion(regionId) {\n      this.selectedRegion = regionId;\n      this.centerRegion(regionId);\n      this.updateSvgClasses();\n      this.$emit('region-selected', regionId);\n    },\n    resetToDefault() {\n      this.selectedRegion = null;\n      this.currentViewBox = this.defaultViewBox;\n      this.zoomLevel = 1;\n      this.updateSvgClasses();\n      this.updateSvgViewBox();\n      this.$emit('region-selected', null);\n    },\n    centerRegion(regionId) {\n      const svg = this.$el.querySelector('.svg-map');\n      const path = svg.querySelector(`.fil${regionId}`);\n      if (path) {\n        const bbox = path.getBBox();\n        const container = this.$el.querySelector('.map-container');\n        let zoomFactor = 1.7;\n        if (container) {\n          const containerWidth = container.clientWidth;\n          const containerHeight = container.clientHeight;\n          zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8;\n        }\n        const newWidth = bbox.width * zoomFactor;\n        const newHeight = bbox.height;\n        const centerX = bbox.x + bbox.width / 2;\n        const centerY = bbox.y + bbox.height / 2;\n        const newX = centerX - newWidth / 2;\n        const newY = centerY - newHeight / 2;\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\n        this.zoomLevel = zoomFactor;\n      }\n    },\n    updateSvgViewBox() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (svg) {\n        svg.setAttribute('viewBox', this.currentViewBox);\n      }\n    },\n    updateSvgClasses() {\n      const svg = this.$el.querySelector('.svg-map');\n      if (!svg) return;\n      const paths = svg.querySelectorAll('path');\n      paths.forEach(path => {\n        const regionId = this.getRegionIdFromClass(path);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          path.classList.add('hidden');\n        } else {\n          path.classList.remove('hidden');\n        }\n      });\n      const texts = svg.querySelectorAll('text');\n      texts.forEach(text => {\n        const regionId = this.getRegionIdFromClass(text);\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\n          text.classList.add('hidden');\n        } else {\n          text.classList.remove('hidden');\n        }\n      });\n    },\n    showTooltip(text, event) {\n      this.tooltipText = text;\n      this.tooltipVisible = true;\n      this.tooltipX = event.clientX;\n      this.tooltipY = event.clientY;\n    },\n    hideTooltip() {\n      this.tooltipVisible = false;\n    }\n  },\n  watch: {\n    selectedRegion() {\n      this.updateSvgClasses();\n    },\n    regionItems: {\n      deep: true\n    },\n    regionStyles: {\n      handler() {\n        this.applyStylesAndTexts();\n      },\n      deep: true\n    },\n    regionTexts: {\n      handler() {\n        this.applyStylesAndTexts();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["MapSvg","components","props","regionItems","type","Array","required","default","regionStyles","Object","regionTexts","data","selectedRegion","tooltipVisible","tooltipText","tooltipX","tooltipY","defaultViewBox","currentViewBox","zoomLevel","mounted","applyStylesAndTexts","updateSvgClasses","addEventListeners","methods","svg","$el","querySelector","paths","querySelectorAll","forEach","path","addEventListener","regionId","getRegionIdFromClass","selectRegion","event","region","find","r","String","id","regionName","name","console","log","showTooltip","hideTooltip","handleSvgClick","target","closest","handleSvgMouseEnter","element","classList","filClass","from","cls","startsWith","replace","contains","warn","style","fill","texts","text","textClasses","textData","filter","item","length","value","percentage","textContent","textFntCityData","centerRegion","$emit","resetToDefault","updateSvgViewBox","bbox","getBBox","container","zoomFactor","containerWidth","clientWidth","containerHeight","clientHeight","Math","min","width","height","newWidth","newHeight","centerX","x","centerY","y","newX","newY","setAttribute","add","remove","clientX","clientY","watch","deep","handler"],"sources":["src/components/MapComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <MapSvg\r\n      :viewBox=\"currentViewBox\"\r\n      class=\"svg-map\"\r\n      @click=\"handleSvgClick\"\r\n      @mouseenter=\"handleSvgMouseEnter\"\r\n      @mouseleave=\"hideTooltip\"\r\n    />\r\n    <div v-if=\"tooltipVisible\" class=\"tooltip\" :style=\"{ left: tooltipX, top: tooltipY}\">\r\n    {{ tooltipText }}\r\n  </div>\r\n    <button v-if=\"selectedRegion !== null\" class=\"reset-btn\" @click=\"resetToDefault\">\r\n      <i class=\"fa-solid fa-earth-americas\"></i>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MapSvg from '@/assets/map.svg';\r\nexport default {\r\n  components: {\r\n    MapSvg,\r\n  },\r\n  props: {\r\n    regionItems: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => [],\r\n    },\r\n    regionStyles: {\r\n      type: Object,\r\n      default: () => ({}), \r\n    },\r\n    regionTexts: {\r\n      type: Object,\r\n      default: () => ({}), \r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      selectedRegion: null,\r\n      tooltipVisible: false,\r\n      tooltipText: '',\r\n      tooltipX: 0,\r\n      tooltipY: 0,\r\n      defaultViewBox: '0 0 29252.3 16557.2',\r\n      currentViewBox: '0 0 29252.3 16557.2',\r\n      zoomLevel: 1,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.applyStylesAndTexts();\r\n    this.updateSvgClasses();\r\n    this.addEventListeners();\r\n  },\r\n  methods: {\r\naddEventListeners() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (!svg) return;\r\n      const paths = svg.querySelectorAll('path');\r\n      paths.forEach((path) => {\r\n        path.addEventListener('click', () => {\r\n          const regionId = this.getRegionIdFromClass(path);\r\n          if (regionId) {\r\n            this.selectRegion(regionId);\r\n          }\r\n        });\r\n        path.addEventListener('mouseenter', (event) => {\r\n          const regionId = this.getRegionIdFromClass(path);\r\n          const region = this.regionItems.find((r) => String(r.id) === regionId);\r\n          const regionName = region ? region.name : 'Неизвестный регион';\r\n          console.log('MouseEnter:', { regionId, region, regionName }); \r\n          this.showTooltip(regionName, event);\r\n        });\r\n        path.addEventListener('mouseleave', () => {\r\n          this.hideTooltip();\r\n        });\r\n      });\r\n    },\r\nhandleSvgClick(event) {\r\n      const path = event.target.closest('path');\r\n      if (path) {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (regionId) {\r\n          this.selectRegion(regionId);\r\n        }\r\n      }\r\n    },\r\nhandleSvgMouseEnter(event) {\r\n      const path = event.target.closest('path');\r\n      if (path) {\r\n        this.showTooltip(event);\r\n      }\r\n    },\r\n    getRegionIdFromClass(element) {\r\n      const classList = element.classList;\r\n      const filClass = Array.from(classList).find((cls) => cls.startsWith('fil'));\r\n      let regionId = filClass ? filClass.replace('fil', '') : null;\r\n      if (classList.contains('fnt-city') && regionId) {\r\n        regionId = `${regionId}-city`;\r\n      }\r\n      return regionId;\r\n    },\r\n    applyStylesAndTexts() {\r\n  const svg = this.$el.querySelector('.svg-map');\r\n  if (!svg) {\r\n    console.warn('SVG element not found');\r\n    return;\r\n  }\r\n\r\n  // Применение стилей к путям\r\n  const paths = svg.querySelectorAll('path');\r\n  paths.forEach((path) => {\r\n    const regionId = this.getRegionIdFromClass(path);\r\n    if (regionId && this.regionStyles[regionId]) {\r\n      path.style.fill = this.regionStyles[regionId];\r\n    } else {\r\n      path.style.fill = '#ccc';\r\n    }\r\n  });\r\n\r\n  // Применение текста\r\n  const texts = svg.querySelectorAll('text');\r\n  texts.forEach((text) => {\r\n    const textClasses = text.classList;\r\n    console.log('Text classes:', textClasses); // Отладка\r\n\r\n    // Проверяем, есть ли класс filN (например, fil7)\r\n    const filClass = Array.from(textClasses).find((cls) => cls.startsWith('fil'));\r\n    if (filClass) {\r\n      const regionId = filClass.replace('fil', '');\r\n      let textData = this.regionItems.filter((item) => String(item.id) === regionId);\r\n      console.log('Text data for regionId', regionId, ':', textData); // Отладка\r\n\r\n      if (textData.length === 1) {\r\n        let value = textData[0]?.percentage || 'N/A';\r\n        value = value.replace(/\\u200B/g, ''); // Очистка от \\u200B\r\n        text.textContent = value;\r\n      } else {\r\n        text.textContent = 'N/A'; // Для отладки\r\n      }\r\n    }\r\n\r\n    // Особая обработка для fnt-city\r\n    if (textClasses.contains('fnt-city')) {\r\n      const regionId = this.getRegionIdFromClass(text); // Например, \"1-city\"\r\n      let textFntCityData = this.regionItems.filter((item) => String(item.id) === regionId);\r\n      console.log('Text fnt-city data for regionId', regionId, ':', textFntCityData); // Отладка\r\n\r\n      if (textFntCityData.length === 1) {\r\n        let value = textFntCityData[0]?.percentage || 'N/A';\r\n        value = value.replace(/\\u200B/g, ''); // Очистка от \\u200B\r\n        text.textContent = `№ ${textFntCityData[0]?.name} - ${value}`;\r\n      } else {\r\n        text.textContent = 'N/A'; // Для отладки\r\n      }\r\n    }\r\n  });\r\n},\r\nselectRegion(regionId) {\r\n      this.selectedRegion = regionId;\r\n      this.centerRegion(regionId);\r\n      this.updateSvgClasses();\r\n      this.$emit('region-selected', regionId);\r\n    },\r\nresetToDefault() {\r\n      this.selectedRegion = null;\r\n      this.currentViewBox = this.defaultViewBox;\r\n      this.zoomLevel = 1;\r\n      this.updateSvgClasses();\r\n      this.updateSvgViewBox();\r\n      this.$emit('region-selected', null);\r\n    },\r\ncenterRegion(regionId) {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      const path = svg.querySelector(`.fil${regionId}`);\r\n      if (path) {\r\n        const bbox = path.getBBox();\r\n        const container = this.$el.querySelector('.map-container');\r\n        let zoomFactor = 1.7;\r\n        if (container) {\r\n          const containerWidth = container.clientWidth;\r\n          const containerHeight = container.clientHeight;\r\n          zoomFactor = Math.min(containerWidth / bbox.width, containerHeight / bbox.height) * 0.8;\r\n        }\r\n        const newWidth = bbox.width * zoomFactor;\r\n        const newHeight = bbox.height;\r\n        const centerX = bbox.x + bbox.width / 2;\r\n        const centerY = bbox.y + bbox.height / 2;\r\n        const newX = centerX - newWidth / 2;\r\n        const newY = centerY - newHeight / 2;\r\n\r\n        this.currentViewBox = `${newX} ${newY} ${newWidth} ${newHeight}`;\r\n        this.zoomLevel = zoomFactor;\r\n      }\r\n    },\r\nupdateSvgViewBox() {\r\n  const svg = this.$el.querySelector('.svg-map');\r\n  if (svg) {\r\n    svg.setAttribute('viewBox', this.currentViewBox);\r\n  }\r\n},\r\nupdateSvgClasses() {\r\n      const svg = this.$el.querySelector('.svg-map');\r\n      if (!svg) return;\r\n      const paths = svg.querySelectorAll('path');\r\n      paths.forEach((path) => {\r\n        const regionId = this.getRegionIdFromClass(path);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          path.classList.add('hidden');\r\n        } else {\r\n          path.classList.remove('hidden');\r\n        }\r\n      });\r\n      const texts = svg.querySelectorAll('text');\r\n      texts.forEach((text) => {\r\n        const regionId = this.getRegionIdFromClass(text);\r\n        if (this.selectedRegion !== null && regionId !== this.selectedRegion) {\r\n          text.classList.add('hidden');\r\n        } else {\r\n          text.classList.remove('hidden');\r\n        }\r\n      });\r\n    },\r\n\r\nshowTooltip(text, event) {\r\n      this.tooltipText = text;\r\n      this.tooltipVisible = true;\r\n      this.tooltipX = event.clientX;\r\n      this.tooltipY = event.clientY;\r\n    },\r\nhideTooltip() {\r\n      this.tooltipVisible = false;\r\n    },\r\n    \r\n  },\r\n  watch: {\r\nselectedRegion() {\r\n      this.updateSvgClasses();\r\n    },\r\n    regionItems: {\r\n      deep: true,\r\n    },\r\n    regionStyles: {\r\n      handler() {\r\n        this.applyStylesAndTexts();\r\n      },\r\n      deep: true,\r\n    },\r\n    regionTexts: {\r\n      handler() {\r\n        this.applyStylesAndTexts();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}